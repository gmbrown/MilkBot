(()=>{const e={T:10,J:11,Q:12,K:13,A:14};function a(a){const o=a.split("?").filter((e=>""!==e)).map((a=>{const o=a[0],s=a[1];let n=e[o]||parseInt(o);return n-=2,{suit:s,rank:o,ranknum:n,cardString:a}}));return o.sort(((e,a)=>a.ranknum-e.ranknum)),o}const o={HIGH_CARD:"HIGH CARD",PAIR:"PAIR",TWO_PAIR:"TWO PAIR",THREE_OF_A_KIND:"THREE OF A KIND",STRAIGHT:"STRAIGHT",FLUSH:"FLUSH",FULL_HOUSE:"FULL HOUSE",FOUR_OF_A_KIND:"FOUR OF A KIND",STRAIGHT_FLUSH:"STRAIGHT FLUSH"};function s(e,a){const o=e.sort(((e,a)=>a.ranknum-e.ranknum)).map((e=>e.rank));let s=[...new Set(o)].join("");s.startsWith("A")&&(s+="A");for(let e=0;e<=s.length-a;e++){const o=s.slice(e,e+a);if("AKQJT98765432A".includes(o))return o[0]}}function n(e,a){const n=new Map,i=new Map,r=e.concat(a);r.sort(((e,a)=>a.ranknum-e.ranknum)),r.forEach((e=>{n.set(e.rank,(n.get(e.rank)||0)+1),i.set(e.suit,(i.get(e.suit)||0)+1)}));let l,h,c={count:0},g={count:0};if(n.forEach(((e,a)=>{e>c.count?(g=c,c={rank:a,count:e}):e>g.count&&(g={rank:a,count:e})})),i.forEach(((e,a)=>{if(e>=5){const e=r.filter((e=>e.suit===a));l=e.map((e=>e.rank)).slice(0,5),h=s(e,5)}})),h)return{hand:o.STRAIGHT_FLUSH,handRanks:[h],kickers:[]};if(4===c.count){const e=c.rank,a=r.filter((a=>a.rank!=e));return{hand:o.FOUR_OF_A_KIND,handRanks:[e],kickers:t(a,1)}}if(3===c.count&&g.count>=2){const e=c.rank,a=g.rank;return{hand:o.FULL_HOUSE,handRanks:[e,a],kickers:[]}}if(l)return{hand:o.FLUSH,handRanks:l,kickers:[]};const u=s(r,5);if(u)return{hand:o.STRAIGHT,handRanks:[u],kickers:[]};if(3===c.count){const e=c.rank;var d=r.filter((a=>a.rank!=e));return{hand:o.THREE_OF_A_KIND,handRanks:[e],kickers:t(d,2)}}if(2===c.count&&2===g.count){const e=[c.rank,g.rank];var T=r.filter((a=>!e.includes(a.rank)));return{hand:o.TWO_PAIR,handRanks:e,kickers:t(T,1)}}if(2===c.count){const e=c.rank;var m=r.filter((a=>a.rank!=e));return{hand:o.PAIR,handRanks:[e],kickers:t(m,3)}}return{hand:o.HIGH_CARD,handRanks:[],kickers:t(r,5)}}function t(e,a){return e.map((e=>e.rank)).slice(0,a)}let i=!1;const r=game.big_blind/100,l="all",h={AA:[l,l],72:[l,l],KK:[l,l],QQ:[l,l],JJ:[l,l],TT:[l,l],99:[10,3],88:[10,3],AK:[l,l],AQ:[30,3],AJ:[30,3],A5:[3,1],AT:[8,3],A9:[1,1],A8:[1,1],KQ:[8,3],KJ:[8,3],KT:[3,3],K9:[1,1],QJ:[3,1],QT:[3,1],Q9:[1,1],Q8:[1,1],JT:[3,1],J9:[1,1],J8:[1,1],J7:[1,1],T9:[1,1],77:[3,1],66:[3,1],55:[3,1],44:[3,1],33:[3,1],22:[3,1]},c={AK:[l,l],AQ:[l,l],AJ:[30,5],AT:[10,5],A9:[10,3],A8:[8,3],A7:[6,1],A6:[6,1],A5:[8,3],A4:[5,1],A3:[5,1],A2:[5,1],KQ:[10,5],KJ:[10,5],KT:[8,3],K9:[6,3],K8:[1,3],QJ:[10,5],QT:[8,1],Q9:[3,1],Q8:[3,1],JT:[10,3],J9:[3,1],J8:[3,1],J7:[3,1],T9:[6,3],T8:[1,1],T7:[1,1],98:[5,1],97:[1,1],87:[5,1],86:[1,1],76:[1,1],75:[1,1],65:[1,1],64:[1,1],54:[1,1],43:[1,1],32:[1,1]};function g(){0===game.action_widget.to_call?u():game.action_widget.execute_fold()}function u(){game.action_widget.execute_check_call()}function d(e,a){const o=game.action_widget.stack_size+game.action_widget.bet_in_front;!function(e,a){const o=game.action_widget.bet_in_front,s=o+game.action_widget.to_call/100,n=o+game.action_widget.stack_size,t=game.action_widget.threshold_values.length?game.action_widget.threshold_values[0]:void 0;if(console.info(`Raise to limit: ${a}. Min bet: ${t}. Call to limit: ${e}. Bet size if call: ${s}.`),(game.action_widget.bet_button||game.action_widget.raise_button)&&t<=a)return console.log(a===n?"Going all in.":`Raising to ${a}.`),game.action_widget.update_slider_by_value(a),game.action_widget.sizing_input.value=a,void game.action_widget.execute_bet_raise();game.action_widget.all_in&&n<=a?(console.log("Can't/won't raise; going all in instead."),game.action_widget.all_in.execute()):game.action_widget.call_button&&s<=e?(console.log("Can't/won't raise; calling instead."),u()):(console.log("Checking/folding."),g())}(e===l?o:e*r,a===l?o:a*r)}function T(e){return m(e)||s(e,4)}function m(e){const a={};return e.forEach((e=>{const o=a[e.suit]||0;a[e.suit]=o+1})),Object.values(a).some((e=>4===e))}setInterval((async function(){if(!game.action_widget||!game.players[game.client_perspective].cards.card_str)return;await new Promise((e=>setTimeout(e,1e3)));const e=game.players[game.client_perspective].cards.card_str,t=game.board.card_str,i=t?` and the board shows ${t}.`:".";console.log(`My hole cards are ${e}${i}`),function(e,t){if("NL Texas Holdem"!==game.ruleset_name)return console.log(`Folding/checking because we aren't playing 'NL Texas Holdem'. The game is ${game.ruleset_name}.`),void g();try{!function(){game.game_options_widget.allow_easy_reveal&&!game.game_options_widget.easy_reveal.is_checked()&&game.game_options_widget.easy_reveal.clicked();game.game_options_widget.bomb_pot_value&&!game.game_options_widget.bomb_pot.is_checked()&&game.game_options_widget.bomb_pot.clicked()}()}catch(e){}""===t?function(e){const[o,s]=a(e),n=o.rank+s.rank;if(o.suit===s.suit){const e=c[n];if(e){console.log("Preflop cards are suited, and match one of the suited starting hands");const[a,o]=e;return void d(a,o)}}const t=h[n];if(!t)return Math.random()>.95?(console.log("Even though this isn't a hand we usually play, randomly limping in if it's cheap."),void d(3,1)):(console.log("Checking or folding."),void g());const[i,r]=t;d(i,r)}(e):function(e,t,i,r){var h=a(e),c=a(t);const u=n(h,c).hand,p=function(e,a){const o=n(e,a).hand,s=n([],a).hand;if(o===s)return[];const[t,i]=e.map((e=>n([e],a).hand));return t===o&&i===o?e[0].rankNum>e[1].rankNum?[e[0]]:[e[1]]:o===t?[e[0]]:o===i?[e[1]]:e}(h,c),_=[];u===o.STRAIGHT_FLUSH&&p.length>0&&_.push({message:"Straight flush!",callTo:l,raiseTo:4*c.length});u===o.FOUR_OF_A_KIND&&p.length>0&&_.push({message:"Four of a kind",callTo:l,raiseTo:4*c.length});u===o.FULL_HOUSE&&p.length>0&&(2===p?n([],c).hand===o.THREE_OF_A_KIND?c.every((e=>e.ranknum<h[0].ranknum))?_.push({message:"Three of a kind on the board and we have a pocket overpair",callTo:l,raiseTo:4*c.length}):_.push({message:"Three of a kind on the board and we have a pocket pair (not overpair)",callTo:10,raiseTo:3}):_.push({message:"Full house using at least both hole cards",callTo:l,raiseTo:4*c.length}):n([],c).hand===o.THREE_OF_A_KIND?_.push({message:"Full house using 1 hole card, but trips on the board",callTo:5,raiseTo:5}):_.push({message:"Full house using 1 hole card, no trips on the board",callTo:l,raiseTo:8}));if(u===o.FLUSH)if(2===p.length)_.push({message:"Flush using both our hole cards",callTo:l,raiseTo:7});else if(1===p.length)["A","K"].includes(p[0].rank)&&_.push({message:"Flush using 1 hole card (A or K)",callTo:l,raiseTo:4}),_.push({message:"Flush using 1 hole card (not A or K)",callTo:5,raiseTo:0});else{h.some((e=>["A","K"].includes(e.rank)&&e.suit===c[0].suit))?_.push({message:"Flush using 1 hole card (A or K)",callTo:l,raiseTo:4}):Math.random()>.9?_.push({message:"Flush on the board, but randomly bluffing 10% of the time",callTo:0,raiseTo:l}):_.push({message:"Flush on the board",callTo:0,raiseTo:0})}u===o.STRAIGHT&&(2===p.length?m(c)?_.push({message:"Straight using both hole cards, but 4 to flush on the board",callTo:5,raiseTo:5}):_.push({message:"Straight using both hole cards, wahoo!",callTo:l,raiseTo:7}):1===p.length?m(c)?_.push({message:"Straight using 1 hole card, but 4 to flush on the board",callTo:3,raiseTo:3}):_.push({message:"Straight using only 1 hole card",callTo:20,raiseTo:3}):(highestBoardCardRankNum=Math.max(...c.map((e=>e.rankNum))),h.some((e=>e.rankNum===highestBoardCardRankNum+1))?m(c)?_.push({message:"We beat the straight on the board, but there are 4 to a flush",callTo:0,raiseTo:0}):_.push({message:"Straight on the board, but we have a better straight",callTo:l,raiseTo:5}):_.push({message:"Straight on the board",callTo:0,raiseTo:0})));u==o.THREE_OF_A_KIND&&p.length>=1&&(T(c)?_.push({message:"Trips using at least 1 hole card, but 4 to flush/straight on the board",callTo:3,raiseTo:3}):2===p?_.push({message:"Pocket pair that hit trips or better",callTo:l,raiseTo:3*c.length}):_.push({message:"Trips using 1 hole card",callTo:25,raiseTo:3*c.length}));u==o.TWO_PAIR&&2==p.length&&(T(c)?_.push({message:"Two pair using both hole cards but 4 to flush/straight on the board",callTo:3,raiseTo:3}):h[0].rank===h[1].rank?c.every((e=>e.ranknum<h[0].ranknum))?_.push({message:"Pair on the board and pocket pair overpair",callTo:15,raiseTo:3}):_.push({message:"Pair on the board and pocket pair (not overpair)",callTo:5,raiseTo:1}):_.push({message:"Two pair using both hole cards",callTo:25,raiseTo:2*c.length}));[AHNDS.PAIR,o.TWO_PAIR].includes(u)&&1==p.length&&(T(c)?_.push({message:"Pair, but 4 to flush/straight on the board",callTo:3,raiseTo:3}):(boardCardRankNumDescending=c.map((e=>e.ranknum)).sort(((e,a)=>a-e)),p[0].ranknum===boardCardRankNumDescending[0]?3===c.length?2===i?_.push({message:"Top pair (only 1 other player in hand)",callTo:20,raiseTo:5}):_.push({message:"Top pair",callTo:10,raiseTo:3}):4===c.length?2===i?_.push({message:"Top pair (only 1 other player in hand)",callTo:20,raiseTo:10}):_.push({message:"Top pair",callTo:10,raiseTo:0}):2===i?_.push({message:"Top pair (only 1 other player in hand)",callTo:30,raiseTo:10}):_.push({message:"Top pair",callTo:10,raiseTo:0}):p[0].ranknum===boardCardRankNumDescending[1]&&(3===c.length?_.push({message:"Second pair",callTo:5,raiseTo:2}):_.push({message:"Second pair",callTo:5,raiseTo:0})),_.push({message:"low pair",callTo:3,raiseTo:0})));u===o.PAIR&&2===p&&(T(c)?_.push({message:"Pocket pair, but 4 to flush/straight on the board",callTo:3,raiseTo:3}):c.every((e=>e.ranknum<h[0].ranknum))?_.push({message:"Pocket pair overpair",callTo:l,raiseTo:5}):h[0].ranknum>9&&2==i&&_.push({message:"Pocket pair isn't top pair but it's high, and only 1 other player",callTo:10,raiseTo:5}));(function(e,a){const o={};return e.concat(a).forEach((e=>{const a=o[e.suit]||0;o[e.suit]=a+1})),Object.entries(o).some((([a,o])=>4===o&&e.every((e=>e.suit===a))))})(h,c)&&(3===c.length&&2===i&&Math.random>.5?_.push({message:"flush draw using both hole cards (3 cards on board), only 1 other player in hand, randomly going all in half the time",callTo:10,raiseTo:l}):5!==c.length&&_.push({message:"flush draw using both hole cards",callTo:10,raiseTo:0}));s(h.concat(c),4)&&!s(c,4)&&(3===c.length&&2===i?Math.random>.7?_.push({message:"straight draw, randomly going all in 30% of the time",callTo:12,raiseTo:l}):_.push({message:"open ended straight draw using at least 1 hole card",callTo:12,raiseTo:12}):5!==c.length&&_.push({message:"open ended straight draw using at least 1 hole card",callTo:10,raiseTo:10}));if(0===_.length&&2===i)return Math.random()>.97&&_.push({message:"Random bluff 3% of the time against 1 other player",callTo:0,raiseTo:l}),console.log("Nothing interesting going on with our hand. Check/folding"),void g();highestCallTo=0,highestRaiseTo=0,console.log("Considering betting based on these things:"),_.forEach((e=>{console.log("callTo: "+e.callTo+", raiseTo: "+e.raiseTo+", "+e.message),highestCallTo===l||e.callTo===l?highestCallTo=l:highestCallTo=Math.max(highestCallTo,e.callTo),highestRaiseTo===l||e.RaiseTo===l?highestRaiseTo=l:highestRaiseTo=Math.max(highestRaiseTo,e.raiseTo)})),console.log("Will call to: "+highestCallTo+" or raise to: "+highestRaiseTo),d(highestCallTo,highestRaiseTo)}(e,t,game.n_players_in_hand)}(e,t)}),2500),socket.on("is in showdown",(function(){const e=game.client_perspective;game.n_players_in_hand>1&&game.players[e].is_sitting_in&&!game.players[e].is_folded&&(console.log("SHOWDOWN WITH ME IN IT"),console.log("# players in showdown:",game.n_players_in_hand),i=Object.entries(game.players).some((([a,o])=>o.is_sitting_in&&!o.is_folded&&0===o.chips&&a!==e+"")),console.log("tauntOpportunity",i))})),socket.on("distributing pot",(function(e){const a=game.client_perspective;i&&e.winners[a]&&1===Object.keys(e.winners).length&&(console.log("Taunting because I knocked someone out!"),socket.emit("taunt",{taunt:16,id:game.table_id,group_id:game.group_id})),i=!1}))})();
//# sourceMappingURL=index.js.map
