(()=>{const e={T:10,J:11,Q:12,K:13,A:14};function a(a){const s=a.split("?").filter((e=>""!==e)).map((a=>{const s=a[0],o=a[1];let t=e[s]||parseInt(s);return t-=2,{suit:o,rank:s,ranknum:t,cardString:a}}));return s.sort(((e,a)=>a.ranknum-e.ranknum)),s}const s={HIGH_CARD:"HIGH CARD",PAIR:"PAIR",TWO_PAIR:"TWO PAIR",THREE_OF_A_KIND:"THREE OF A KIND",STRAIGHT:"STRAIGHT",FLUSH:"FLUSH",FULL_HOUSE:"FULL HOUSE",FOUR_OF_A_KIND:"FOUR OF A KIND",STRAIGHT_FLUSH:"STRAIGHT FLUSH"},o={A:12,K:11,Q:10,J:9,T:8,9:7,8:6,7:5,6:4,5:3,4:2,3:1,2:0};function t(e,a){const s=e.sort(((e,a)=>a.ranknum-e.ranknum)).map((e=>e.rank));let o=[...new Set(s)].join("");o.startsWith("A")&&(o+="A");for(let e=0;e<=o.length-a;e++){const s=o.slice(e,e+a);if(-1!=="AKQJT98765432A".indexOf(s))return s[0]}}function n(e,a){const n={},r={},l=e.concat(a);l.forEach((e=>{const a=n[e.rank]||0;n[e.rank]=a+1;const s=r[e.suit]||0;r[e.suit]=s+1}));let h=0,c=0;Object.entries(n).forEach((([e,a])=>{a>h?(c=h,h=a):a>c&&(c=a)}));var g,u=!1,d=[];if(Object.entries(r).forEach((([e,a])=>{if(a>=5){u=!0;const a=l.filter((a=>a.suit===e));d=a.sort(((e,a)=>a.ranknum-e.ranknum)).map((e=>e.rank)).slice(0,5),g=t(a,5)}})),g)return{hand:s.STRAIGHT_FLUSH,handRanks:[g],kickers:[]};if(4===h){const e=Object.entries(n).filter((([,e])=>4===e))[0][0],a=l.filter((a=>a.rank!=e));return{hand:s.FOUR_OF_A_KIND,handRanks:[e],kickers:i(a,1)}}if(3===h&&c>=2){var T=[],m=[];for(let e in n)3==n[e]?T.push(e):2==n[e]&&m.push(e);return T.sort(((e,a)=>o[a]-o[e])),T.length>1&&m.push(T[1]),m.sort(((e,a)=>o[a]-o[e])),{hand:s.FULL_HOUSE,handRanks:[T[0],m[0]],kickers:[]}}if(u)return{hand:s.FLUSH,handRanks:d,kickers:[]};const p=t(l,5);if(p)return{hand:s.STRAIGHT,handRanks:[p],kickers:[]};if(3===h){const e=Object.entries(n).filter((([,e])=>3===e))[0][0];var _=l.filter((a=>a.rank!=e));return{hand:s.THREE_OF_A_KIND,handRanks:[e],kickers:i(_,2)}}if(2===h&&2===c){const e=Object.entries(n).filter((([,e])=>2===e)).map((([e])=>e)).sort(((e,a)=>o[a]-o[e])).slice(0,2);var k=l.filter((a=>!e.includes(a.rank)));return{hand:s.TWO_PAIR,handRanks:e,kickers:i(k,1)}}if(2===h){const e=Object.entries(n).filter((([,e])=>2===e))[0][0];var f=l.filter((a=>a.rank!=e));return{hand:s.PAIR,handRanks:[e],kickers:i(f,3)}}return{hand:s.HIGH_CARD,handRanks:[],kickers:i(l,5)}}function i(e,a){return e.map((e=>e.rank)).sort(((e,a)=>o[a]-o[e])).slice(0,a)}let r=!1;const l=game.big_blind/100,h="all",c={AA:[h,h],72:[h,h],KK:[h,h],QQ:[h,h],JJ:[h,h],TT:[h,h],99:[10,3],88:[10,3],AK:[h,h],AQ:[30,3],AJ:[30,3],A5:[3,1],AT:[8,3],A9:[1,1],A8:[1,1],KQ:[8,3],KJ:[8,3],KT:[3,3],K9:[1,1],QJ:[3,1],QT:[3,1],Q9:[1,1],Q8:[1,1],JT:[3,1],J9:[1,1],J8:[1,1],J7:[1,1],T9:[1,1],77:[3,1],66:[3,1],55:[3,1],44:[3,1],33:[3,1],22:[3,1]},g={AK:[h,h],AQ:[h,h],AJ:[30,5],AT:[10,5],A9:[10,3],A8:[8,3],A7:[6,1],A6:[6,1],A5:[8,3],A4:[5,1],A3:[5,1],A2:[5,1],KQ:[10,5],KJ:[10,5],KT:[8,3],K9:[6,3],K8:[1,3],QJ:[10,5],QT:[8,1],Q9:[3,1],Q8:[3,1],JT:[10,3],J9:[3,1],J8:[3,1],J7:[3,1],T9:[6,3],T8:[1,1],T7:[1,1],98:[5,1],97:[1,1],87:[5,1],86:[1,1],76:[1,1],75:[1,1],65:[1,1],64:[1,1],54:[1,1],43:[1,1],32:[1,1]};function u(){0===game.action_widget.to_call?d():game.action_widget.execute_fold()}function d(){game.action_widget.execute_check_call()}function T(e,a){const s=game.action_widget.stack_size+game.action_widget.bet_in_front;!function(e,a){const s=game.action_widget.bet_in_front,o=s+game.action_widget.to_call/100,t=s+game.action_widget.stack_size,n=game.action_widget.threshold_values.length?game.action_widget.threshold_values[0]:void 0;if(console.info(`Raise to limit: ${a}. Min bet: ${n}. Call to limit: ${e}. Bet size if call: ${o}.`),(game.action_widget.bet_button||game.action_widget.raise_button)&&n<=a)return console.log(a===t?"Going all in.":`Raising to ${a}.`),game.action_widget.update_slider_by_value(a),game.action_widget.sizing_input.value=a,void game.action_widget.execute_bet_raise();game.action_widget.all_in&&t<=a?(console.log("Can't/won't raise; going all in instead."),game.action_widget.all_in.execute()):game.action_widget.call_button&&o<=e?(console.log("Can't/won't raise; calling instead."),d()):(console.log("Checking/folding."),u())}(e===h?s:e*l,a===h?s:a*l)}function m(e){return p(e)||t(e,4)}function p(e){const a={};return e.forEach((e=>{const s=a[e.suit]||0;a[e.suit]=s+1})),Object.values(a).some((e=>4===e))}setInterval((async function(){if(!game.action_widget||!game.players[game.client_perspective].cards.card_str)return;await new Promise((e=>setTimeout(e,1e3)));const e=game.players[game.client_perspective].cards.card_str,o=game.board.card_str,i=o?` and the board shows ${o}.`:".";console.log(`My hole cards are ${e}${i}`),function(e,o){if("NL Texas Holdem"!==game.ruleset_name)return console.log(`Folding/checking because we aren't playing 'NL Texas Holdem'. The game is ${game.ruleset_name}.`),void u();try{!function(){game.game_options_widget.allow_easy_reveal&&!game.game_options_widget.easy_reveal.is_checked()&&game.game_options_widget.easy_reveal.clicked();game.game_options_widget.bomb_pot_value&&!game.game_options_widget.bomb_pot.is_checked()&&game.game_options_widget.bomb_pot.clicked()}()}catch(e){}""===o?function(e){const[s,o]=a(e),t=s.rank+o.rank;if(s.suit===o.suit){const e=g[t];if(e){console.log("Preflop cards are suited, and match one of the suited starting hands");const[a,s]=e;return void T(a,s)}}const n=c[t];if(!n)return Math.random()>.95?(console.log("Even though this isn't a hand we usually play, randomly limping in if it's cheap."),void T(3,1)):(console.log("Checking or folding."),void u());const[i,r]=n;T(i,r)}(e):function(e,o,i,r){var l=a(e),c=a(o);const g=n(l,c).hand,d=function(e,a){const s=n(e,a).hand,o=n([],a).hand;if(s===o)return[];const[t,i]=e.map((e=>n([e],a).hand));return t===s&&i===s?e[0].rankNum>e[1].rankNum?[e[0]]:[e[1]]:s===t?[e[0]]:s===i?[e[1]]:e}(l,c),_=[];g===s.STRAIGHT_FLUSH&&d.length>0&&_.push({message:"Straight flush!",callTo:h,raiseTo:4*c.length});g===s.FOUR_OF_A_KIND&&d.length>0&&_.push({message:"Four of a kind",callTo:h,raiseTo:4*c.length});g===s.FULL_HOUSE&&d.length>0&&(2===d?n([],c).hand===s.THREE_OF_A_KIND?c.every((e=>e.ranknum<l[0].ranknum))?_.push({message:"Three of a kind on the board and we have a pocket overpair",callTo:h,raiseTo:4*c.length}):_.push({message:"Three of a kind on the board and we have a pocket pair (not overpair)",callTo:10,raiseTo:3}):_.push({message:"Full house using at least both hole cards",callTo:h,raiseTo:4*c.length}):n([],c).hand===s.THREE_OF_A_KIND?_.push({message:"Full house using 1 hole card, but trips on the board",callTo:5,raiseTo:5}):_.push({message:"Full house using 1 hole card, no trips on the board",callTo:h,raiseTo:8}));if(g===s.FLUSH)if(2===d.length)_.push({message:"Flush using both our hole cards",callTo:h,raiseTo:7});else if(1===d.length)["A","K"].includes(d[0].rank)&&_.push({message:"Flush using 1 hole card (A or K)",callTo:h,raiseTo:4}),_.push({message:"Flush using 1 hole card (not A or K)",callTo:5,raiseTo:0});else{l.some((e=>["A","K"].includes(e.rank)&&e.suit===c[0].suit))?_.push({message:"Flush using 1 hole card (A or K)",callTo:h,raiseTo:4}):Math.random()>.9?_.push({message:"Flush on the board, but randomly bluffing 10% of the time",callTo:0,raiseTo:h}):_.push({message:"Flush on the board",callTo:0,raiseTo:0})}g===s.STRAIGHT&&(2===d.length?p(c)?_.push({message:"Straight using both hole cards, but 4 to flush on the board",callTo:5,raiseTo:5}):_.push({message:"Straight using both hole cards, wahoo!",callTo:h,raiseTo:7}):1===d.length?p(c)?_.push({message:"Straight using 1 hole card, but 4 to flush on the board",callTo:3,raiseTo:3}):_.push({message:"Straight using only 1 hole card",callTo:20,raiseTo:3}):(highestBoardCardRankNum=Math.max(...c.map((e=>e.rankNum))),l.some((e=>e.rankNum===highestBoardCardRankNum+1))?p(c)?_.push({message:"We beat the straight on the board, but there are 4 to a flush",callTo:0,raiseTo:0}):_.push({message:"Straight on the board, but we have a better straight",callTo:h,raiseTo:5}):_.push({message:"Straight on the board",callTo:0,raiseTo:0})));g==s.THREE_OF_A_KIND&&d.length>=1&&(m(c)?_.push({message:"Trips using at least 1 hole card, but 4 to flush/straight on the board",callTo:3,raiseTo:3}):2===d?_.push({message:"Pocket pair that hit trips or better",callTo:h,raiseTo:3*c.length}):_.push({message:"Trips using 1 hole card",callTo:25,raiseTo:3*c.length}));g==s.TWO_PAIR&&2==d.length&&(m(c)?_.push({message:"Two pair using both hole cards but 4 to flush/straight on the board",callTo:3,raiseTo:3}):l[0].rank===l[1].rank?c.every((e=>e.ranknum<l[0].ranknum))?_.push({message:"Pair on the board and pocket pair overpair",callTo:15,raiseTo:3}):_.push({message:"Pair on the board and pocket pair (not overpair)",callTo:5,raiseTo:1}):_.push({message:"Two pair using both hole cards",callTo:25,raiseTo:2*c.length}));[AHNDS.PAIR,s.TWO_PAIR].includes(g)&&1==d.length&&(m(c)?_.push({message:"Pair, but 4 to flush/straight on the board",callTo:3,raiseTo:3}):(boardCardRankNumDescending=c.map((e=>e.ranknum)).sort(((e,a)=>a-e)),d[0].ranknum===boardCardRankNumDescending[0]?3===c.length?2===i?_.push({message:"Top pair (only 1 other player in hand)",callTo:20,raiseTo:5}):_.push({message:"Top pair",callTo:10,raiseTo:3}):4===c.length?2===i?_.push({message:"Top pair (only 1 other player in hand)",callTo:20,raiseTo:10}):_.push({message:"Top pair",callTo:10,raiseTo:0}):2===i?_.push({message:"Top pair (only 1 other player in hand)",callTo:30,raiseTo:10}):_.push({message:"Top pair",callTo:10,raiseTo:0}):d[0].ranknum===boardCardRankNumDescending[1]&&(3===c.length?_.push({message:"Second pair",callTo:5,raiseTo:2}):_.push({message:"Second pair",callTo:5,raiseTo:0})),_.push({message:"low pair",callTo:3,raiseTo:0})));g===s.PAIR&&2===d&&(m(c)?_.push({message:"Pocket pair, but 4 to flush/straight on the board",callTo:3,raiseTo:3}):c.every((e=>e.ranknum<l[0].ranknum))?_.push({message:"Pocket pair overpair",callTo:h,raiseTo:5}):l[0].ranknum>9&&2==i&&_.push({message:"Pocket pair isn't top pair but it's high, and only 1 other player",callTo:10,raiseTo:5}));(function(e,a){const s={};return e.concat(a).forEach((e=>{const a=s[e.suit]||0;s[e.suit]=a+1})),Object.entries(s).some((([a,s])=>4===s&&e.every((e=>e.suit===a))))})(l,c)&&(3===c.length&&2===i&&Math.random>.5?_.push({message:"flush draw using both hole cards (3 cards on board), only 1 other player in hand, randomly going all in half the time",callTo:10,raiseTo:h}):5!==c.length&&_.push({message:"flush draw using both hole cards",callTo:10,raiseTo:0}));t(l.concat(c),4)&&!t(c,4)&&(3===c.length&&2===i?Math.random>.7?_.push({message:"straight draw, randomly going all in 30% of the time",callTo:12,raiseTo:h}):_.push({message:"open ended straight draw using at least 1 hole card",callTo:12,raiseTo:12}):5!==c.length&&_.push({message:"open ended straight draw using at least 1 hole card",callTo:10,raiseTo:10}));if(0===_.length&&2===i)return Math.random()>.97&&_.push({message:"Random bluff 3% of the time against 1 other player",callTo:0,raiseTo:h}),console.log("Nothing interesting going on with our hand. Check/folding"),void u();highestCallTo=0,highestRaiseTo=0,console.log("Considering betting based on these things:"),_.forEach((e=>{console.log("callTo: "+e.callTo+", raiseTo: "+e.raiseTo+", "+e.message),highestCallTo===h||e.callTo===h?highestCallTo=h:highestCallTo=Math.max(highestCallTo,e.callTo),highestRaiseTo===h||e.RaiseTo===h?highestRaiseTo=h:highestRaiseTo=Math.max(highestRaiseTo,e.raiseTo)})),console.log("Will call to: "+highestCallTo+" or raise to: "+highestRaiseTo),T(highestCallTo,highestRaiseTo)}(e,o,game.n_players_in_hand)}(e,o)}),2500),socket.on("is in showdown",(function(){const e=game.client_perspective;game.n_players_in_hand>1&&game.players[e].is_sitting_in&&!game.players[e].is_folded&&(console.log("SHOWDOWN WITH ME IN IT"),console.log("# players in showdown:",game.n_players_in_hand),r=Object.entries(game.players).some((([a,s])=>s.is_sitting_in&&!s.is_folded&&0===s.chips&&a!==e+"")),console.log("tauntOpportunity",r))})),socket.on("distributing pot",(function(e){const a=game.client_perspective;r&&e.winners[a]&&1===Object.keys(e.winners).length&&(console.log("Taunting because I knocked someone out!"),socket.emit("taunt",{taunt:16,id:game.table_id,group_id:game.group_id})),r=!1}))})();
//# sourceMappingURL=index.js.map
