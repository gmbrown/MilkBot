(()=>{const n={T:10,J:11,Q:12,K:13,A:14};function e(e){const t=e.split("?").filter((n=>""!==n)).map((e=>{const t=e[0],a=e[1];let i=n[t]||parseInt(t);return i-=2,{suit:a,rank:t,ranknum:i,cardString:e}}));return t.sort(((n,e)=>e.ranknum-n.ranknum)),t}const t={HIGH_CARD:"HIGH CARD",PAIR:"PAIR",TWO_PAIR:"TWO PAIR",THREE_OF_A_KIND:"THREE OF A KIND",STRAIGHT:"STRAIGHT",FLUSH:"FLUSH",FULL_HOUSE:"FULL HOUSE",FOUR_OF_A_KIND:"FOUR OF A KIND",STRAIGHT_FLUSH:"STRAIGHT FLUSH"},a={[t.HIGH_CARD]:1,[t.PAIR]:2,[t.TWO_PAIR]:3,[t.THREE_OF_A_KIND]:4,[t.STRAIGHT]:5,[t.FLUSH]:6,[t.FULL_HOUSE]:7,[t.FOUR_OF_A_KIND]:8,[t.STRAIGHT_FLUSH]:9},i={A:12,K:11,Q:10,J:9,T:8,9:7,8:6,7:5,6:4,5:3,4:2,3:1,2:0},o=["2D","2C","2H","2S","3D","3C","3H","3S","4D","4C","4H","4S","5D","5C","5H","5S","6D","6C","6H","6S","7D","7C","7H","7S","8D","8C","8H","8S","9D","9C","9H","9S","TD","TC","TH","TS","JD","JC","JH","JS","QD","QC","QH","QS","KD","KC","KH","KS","AD","AC","AH","AS"];function r(n){return function(n,e,t=!1){t||(n=n.sort(((n,e)=>e.ranknum-n.ranknum)));const a=n.map((n=>n.rank)),o=new Set(a),r=o.values();let s=r.next().value,c=s,l=1;for(const n of r){if(i[s]-i[n]==1){if(l++,l===e)return c}else c=n,l=1;s=n}if(o.has("A")&&e-1===l&&"2"===s)return c}(n,5,!0)}function s(n,e){const a=new Map,i=new Map,o=n.concat(e);o.sort(((n,e)=>e.ranknum-n.ranknum)),o.forEach((n=>{a.set(n.rank,(a.get(n.rank)||0)+1),i.set(n.suit,(i.get(n.suit)||0)+1)}));let s,l,g={count:0},_={count:0};if(a.forEach(((n,e)=>{n>g.count?(_=g,g={rank:e,count:n}):n>_.count&&(_={rank:e,count:n})})),i.forEach(((n,e)=>{if(n>=5){const n=o.filter((n=>n.suit===e));s=n.map((n=>n.rank)).slice(0,5),l=r(n)}})),l)return{hand:t.STRAIGHT_FLUSH,handRanks:[l],kickers:[]};if(4===g.count){const n=g.rank,e=o.filter((e=>e.rank!=n));return{hand:t.FOUR_OF_A_KIND,handRanks:[n],kickers:c(e,1)}}if(3===g.count&&_.count>=2){const n=g.rank,e=_.rank;return{hand:t.FULL_HOUSE,handRanks:[n,e],kickers:[]}}if(s)return{hand:t.FLUSH,handRanks:s,kickers:[]};const d=r(o);if(d)return{hand:t.STRAIGHT,handRanks:[d],kickers:[]};if(3===g.count){const n=g.rank;var u=o.filter((e=>e.rank!=n));return{hand:t.THREE_OF_A_KIND,handRanks:[n],kickers:c(u,2)}}if(2===g.count&&2===_.count){const n=[g.rank,_.rank];var m=o.filter((e=>!n.includes(e.rank)));return{hand:t.TWO_PAIR,handRanks:n,kickers:c(m,1)}}if(2===g.count){const n=g.rank;var f=o.filter((e=>e.rank!=n));return{hand:t.PAIR,handRanks:[n],kickers:c(f,3)}}return{hand:t.HIGH_CARD,handRanks:[],kickers:c(o,5)}}function c(n,e){return n.map((n=>n.rank)).slice(0,e)}function l(n,e){var t=a[n.hand]-a[e.hand];if(t>0)return"win";if(t<0)return"lose";for(const[a,o]of n.handRanks.entries()){if((t=i[o]-i[e.handRanks[a]])>0)return"win";if(t<0)return"lose"}for(const[a,o]of n.kickers.entries()){if((t=i[o]-i[e.kickers[a]])>0)return"win";if(t<0)return"lose"}return"draw"}function g(n,t){const a=new Set([...n.map((n=>n.cardString)),...t.map((n=>n.cardString))]);if(5===t.length)return _(n,t,a);if(4===t.length){const i=o.filter((n=>!a.has(n)));return i.reduce(((i,o)=>{const r=[...t,...e(o)];return a.add(o),i+=_(n,r,a),a.delete(o),i}),0)/i.length}if(3===t.length){const i=o.filter((n=>!a.has(n)));let r=0;for(let o=0;o<i.length;o++){a.add(i[o]);for(let s=o+1;s<i.length;s++){a.add(i[s]);const c=[...t,...e(i[o]),...e(i[s])];r+=_(n,c,a),a.delete(i[s])}a.delete(i[o])}return r/(i.length*(i.length-1)/2)}}function _(n,t,a){let i=0,r=0;const c=o.filter((n=>!a.has(n))),g=s(n,t);for(let n=0;n<c.length;n++)for(let a=n+1;a<c.length;a++){const o=l(g,s(e(`${c[n]}?${c[a]}?`),t));"win"===o?i++:"lose"===o?r++:"draw"===o&&0}return i/(i+r)}let d=!1;const u=game.big_blind/100,m="all",f={AA:[m,m],72:[m,m],KK:[m,m],QQ:[m,m],JJ:[m,m],TT:[m,m],99:[10,3],88:[10,3],AK:[m,m],AQ:[30,3],AJ:[30,3],A5:[3,1],AT:[8,3],A9:[1,1],A8:[1,1],KQ:[8,3],KJ:[8,3],KT:[3,3],K9:[1,1],QJ:[3,1],QT:[3,1],Q9:[1,1],Q8:[1,1],JT:[3,1],J9:[1,1],J8:[1,1],J7:[1,1],T9:[1,1],77:[3,1],66:[3,1],55:[3,1],44:[3,1],33:[3,1],22:[3,1]},h={AK:[m,m],AQ:[m,m],AJ:[30,5],AT:[10,5],A9:[10,3],A8:[8,3],A7:[6,1],A6:[6,1],A5:[8,3],A4:[5,1],A3:[5,1],A2:[5,1],KQ:[10,5],KJ:[10,5],KT:[8,3],K9:[6,3],K8:[1,3],QJ:[10,5],QT:[8,1],Q9:[3,1],Q8:[3,1],JT:[10,3],J9:[3,1],J8:[3,1],J7:[3,1],T9:[6,3],T8:[1,1],T7:[1,1],98:[5,1],97:[1,1],87:[5,1],86:[1,1],76:[1,1],75:[1,1],65:[1,1],64:[1,1],54:[1,1],43:[1,1],32:[1,1]};async function k(){if(!game.action_widget||!game.players[game.client_perspective].cards.card_str)return;await new Promise((n=>setTimeout(n,1e3)));const n=game.players[game.client_perspective].cards.card_str,t=game.board.card_str,a=t?` and the board shows ${t}.`:".";console.log(`My hole cards are ${n}${a}`),function(n,t){if("NL Texas Holdem"!==game.ruleset_name)return console.log(`Folding/checking because we aren't playing 'NL Texas Holdem'. The game is ${game.ruleset_name}.`),void w();try{!function(){game.game_options_widget.allow_easy_reveal&&!game.game_options_widget.easy_reveal.is_checked()&&game.game_options_widget.easy_reveal.clicked();game.game_options_widget.bomb_pot_value&&!game.game_options_widget.bomb_pot.is_checked()&&game.game_options_widget.bomb_pot.clicked()}()}catch(n){}""===t?function(n){const[t,a]=e(n),i=t.rank+a.rank;if(t.suit===a.suit){const n=h[i];if(n){console.log("Preflop cards are suited, and match one of the suited starting hands");const[e,t]=n;return void p(e,t)}}const o=f[i];if(!o)return Math.random()>.95?(console.log("Even though this isn't a hand we usually play, randomly limping in if it's cheap."),void p(3,1)):(console.log("Checking or folding."),void w());const[r,s]=o;p(r,s)}(n):function(n,t){const a=e(n),i=e(t),o=g(a,i);console.log(`Chances of winning against a random hand: ${o}.`);const r=game.action_widget.pot_size;if(o>.9){const n=game.action_widget.bet_in_front+game.action_widget.stack_size;return T(n,3*Math.random()>2&&i.length<5?0:Math.random()*n)}if(o>.65){const n=(o-.65)/.25;return T(Math.max(3*u,2*r*n),r*n)}if(o>.5)return T(Math.max(3*u,r/10),0);console.log("Checking or folding."),w()}(n,t,game.n_players_in_hand)}(n,t)}function w(){0===game.action_widget.to_call?A():game.action_widget.execute_fold()}function A(){game.action_widget.execute_check_call()}function T(n,e){const t=game.action_widget.bet_in_front,a=t+game.action_widget.to_call/100,i=t+game.action_widget.stack_size,o=game.action_widget.threshold_values.length?game.action_widget.threshold_values[0]:void 0;if(console.info(`Raise to limit: ${e}. Min bet: ${o}. Call to limit: ${n}. Bet size if call: ${a}.`),(game.action_widget.bet_button||game.action_widget.raise_button)&&o<=e)return console.log(e===i?"Going all in.":`Raising to ${e}.`),game.action_widget.update_slider_by_value(e),game.action_widget.sizing_input.value=e,void game.action_widget.execute_bet_raise();game.action_widget.all_in&&i<=e?(console.log("Can't/won't raise; going all in instead."),game.action_widget.all_in.execute()):game.action_widget.call_button&&a<=n?(console.log("Can't/won't raise; calling instead."),A()):(console.log("Checking/folding."),w())}function p(n,e){const t=game.action_widget.stack_size+game.action_widget.bet_in_front;T(n===m?t:n*u,e===m?t:e*u)}setInterval((async function(){try{H||(H=!0,await k())}finally{await new Promise((n=>setTimeout(n,1e3))),H=!1}}),2500),socket.on("is in showdown",(function(){const n=game.client_perspective;game.n_players_in_hand>1&&game.players[n].is_sitting_in&&!game.players[n].is_folded&&(console.log("SHOWDOWN WITH ME IN IT"),console.log("# players in showdown:",game.n_players_in_hand),d=Object.entries(game.players).some((([e,t])=>t.is_sitting_in&&!t.is_folded&&0===t.chips&&e!==n+"")),console.log("tauntOpportunity",d))})),socket.on("distributing pot",(function(n){const e=game.client_perspective;d&&n.winners[e]&&1===Object.keys(n.winners).length&&(console.log("Taunting because I knocked someone out!"),socket.emit("taunt",{taunt:16,id:game.table_id,group_id:game.group_id})),d=!1}));let H=!1})();
//# sourceMappingURL=index.js.map
