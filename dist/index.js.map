{"mappings":"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","sources":["playhand.js","index.js"],"sourcesContent":["let tauntOpportunity = false; // set to true if I'm in a showdown and someone else is all-in\n\nconst mb = { // constants\n    BIG_BLIND: game.big_blind/100, // not accounting for someone changing BB mid-game\n    ALL: 'all',\n    HIGH_CARD: 'HIGH CARD',\n    PAIR: 'PAIR',\n    TWO_PAIR: 'TWO PAIR',\n    THREE_OF_A_KIND: 'THREE OF A KIND',\n    STRAIGHT: 'STRAIGHT',\n    FLUSH: 'FLUSH',\n    FULL_HOUSE: 'FULL HOUSE',\n    FOUR_OF_A_KIND: 'FOUR OF A KIND',\n    STRAIGHT_FLUSH: 'STRAIGHT FLUSH'\n}\n\nconst preFlopHandsToBetMultipliers = {\n    // hand_ranks: [call_to, raise_to]\n    // call_to and raise_to are multipliers of the big blind\n    AA: [mb.ALL, mb.ALL],\n    72: [mb.ALL, mb.ALL],\n    KK: [mb.ALL, mb.ALL],\n    QQ: [mb.ALL, mb.ALL],\n    JJ: [mb.ALL, mb.ALL],\n    TT: [mb.ALL, mb.ALL],\n    99: [10, 3],\n    88: [10, 3],\n    AK: [mb.ALL, mb.ALL],\n    AQ: [30, 3],\n    AJ: [30, 3],\n    A5: [3, 1],\n    AT: [8, 3],\n    A9: [1, 1],\n    A8: [1, 1],\n    KQ: [8, 3],\n    KJ: [8, 3],\n    KT: [3, 3],\n    K9: [1, 1],\n    QJ: [3, 1],\n    QT: [3, 1],\n    Q9: [1, 1],\n    Q8: [1, 1],\n    JT: [3, 1],\n    J9: [1, 1],\n    J8: [1, 1],\n    J7: [1, 1],\n    T9: [1, 1],\n    77: [3, 1],\n    66: [3, 1],\n    55: [3, 1],\n    44: [3, 1],\n    33: [3, 1],\n    22: [3, 1]\n}\n\nconst suitedPreFlopHandsToBetMultipliers = {\n    AK: [mb.ALL, mb.ALL],\n    AQ: [mb.ALL, mb.ALL],\n    AJ: [30, 5],\n    AT: [10, 5],\n    A9: [10, 3],\n    A8: [8, 3],\n    A7: [6, 1],\n    A6: [6, 1],\n    A5: [8, 3],\n    A4: [5, 1],\n    A3: [5, 1],\n    A2: [5, 1],\n    KQ: [10, 5],\n    KJ: [10, 5],\n    KT: [8, 3],\n    K9: [6, 3],\n    K8: [1, 3],\n    QJ: [10, 5],\n    QT: [8, 1],\n    Q9: [3, 1],\n    Q8: [3, 1],\n    JT: [10, 3],\n    J9: [3, 1],\n    J8: [3, 1],\n    J7: [3, 1],\n    T9: [6, 3],\n    T8: [1, 1],\n    T7: [1, 1],\n    98: [5, 1],\n    97: [1, 1],\n    87: [5, 1],\n    86: [1, 1],\n    76: [1, 1],\n    75: [1, 1],\n    65: [1, 1],\n    64: [1, 1],\n    54: [1, 1],\n    43: [1, 1],\n    32: [1, 1]\n}\n\nexport async function checkIfTurnAndPlay () {\n    if (!game.action_widget || !game.players[game.client_perspective].cards.card_str) {\n        // seems like sometimes action_widget will be truthy but there are no cards... skip\n        return\n    }\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const holeCards = game.players[game.client_perspective].cards.card_str;\n    const boardCards = game.board.card_str;\n    const boardCardsLogMsg = boardCards ? ` and the board shows ${boardCards}.` : '.';\n    console.log(`My hole cards are ${holeCards}${boardCardsLogMsg}`)\n    playHand(holeCards, boardCards)\n}\n\nfunction setDefaultGameOptions() {\n    if (game.game_options_widget.allow_easy_reveal && !game.game_options_widget.easy_reveal.is_checked()) {\n        game.game_options_widget.easy_reveal.clicked()\n    }\n    if (game.game_options_widget.bomb_pot_value && !game.game_options_widget.bomb_pot.is_checked()) {\n        game.game_options_widget.bomb_pot.clicked()\n    }\n}\n\nfunction checkOrFold() {\n    if (game.action_widget.to_call === 0) {\n        checkOrCall()\n    } else {\n        game.action_widget.execute_fold()\n    }\n}\n\nfunction checkOrCall() {\n    game.action_widget.execute_check_call()\n}\n\nfunction makeBetOfSize(callToLimit, raiseToLimit) { // TODO later on, take in increment size so we can do smaller raises\n    const betInFront = game.action_widget.bet_in_front;\n    const betSizeIfCall = betInFront + (game.action_widget.to_call / 100);\n    const betSizeIfAllIn = betInFront + game.action_widget.stack_size;\n    const minBet = game.action_widget.threshold_values.length ? game.action_widget.threshold_values[0] : undefined;\n    console.info(`Raise to limit: ${raiseToLimit}. Min bet: ${minBet}. Call to limit: ${callToLimit}. Bet size if call: ${betSizeIfCall}.`)\n    if (game.action_widget.bet_button || game.action_widget.raise_button) {\n        if (minBet <= raiseToLimit) {\n            console.log(raiseToLimit === betSizeIfAllIn ? 'Going all in.' : `Raising to ${raiseToLimit}.`)\n            game.action_widget.update_slider_by_value(raiseToLimit);\n            game.action_widget.sizing_input.value = raiseToLimit;\n            game.action_widget.execute_bet_raise();\n            return\n        }\n    }\n    // If we get here, either raising wasn't an option in the game or the min bet was too high for us.\n    if (game.action_widget.all_in && betSizeIfAllIn <= raiseToLimit) {\n        console.log(\"Can't/won't raise; going all in instead.\")\n        game.action_widget.all_in.execute()\n    } else if (game.action_widget.call_button && betSizeIfCall <= callToLimit) {\n        console.log(\"Can't/won't raise; calling instead.\")\n        checkOrCall()\n    } else {\n        console.log('Checking/folding.')\n        checkOrFold()\n    }\n}\n\nfunction makeBetUsingMultipliers(callToMult, raiseToMult) {\n    const betSizeIfAllIn = game.action_widget.stack_size + game.action_widget.bet_in_front;\n    const callToLimit = callToMult === mb.ALL ? betSizeIfAllIn : callToMult * mb.BIG_BLIND;\n    const raiseToLimit = raiseToMult === mb.ALL ? betSizeIfAllIn : raiseToMult * mb.BIG_BLIND;\n    makeBetOfSize(callToLimit, raiseToLimit);\n}\n\nfunction playHand(handString, boardString) {\n    if (game.ruleset_name !== 'NL Texas Holdem') {\n        console.log(`Folding/checking because we aren't playing 'NL Texas Holdem'. The game is ${game.ruleset_name}.`)\n        checkOrFold()\n        return;\n    }\n    try {\n        setDefaultGameOptions()\n    } catch (e) {\n        // we don't really care\n    }\n\n    if (boardString === \"\") {\n        preflop(handString)\n    }\n    else {\n        postflop(handString, boardString, game.n_players_in_hand)\n    }\n}\n\nconst nonNumericRankToNum = {\n    T: 10,\n    J: 11,\n    Q: 12,\n    K: 13,\n    A: 14\n}\n\nexport function cardStringToObj(cardsString) {\n    const cards = cardsString.split(\"?\")\n        .filter(card => card !== \"\")\n        .map(cardString => {\n            const rank = cardString[0];\n            const suit = cardString[1];\n\n            let ranknum = nonNumericRankToNum[rank] || parseInt(rank);\n            // Rank number should go 0 - 12\n            ranknum -= 2;\n\n            return {\n                suit,\n                rank,\n                ranknum\n            };\n        });\n    cards.sort((a,b) => (b.ranknum - a.ranknum));\n    return cards\n}\n\nfunction preflop(cardsString) {\n    const [card1, card2] = cardStringToObj(cardsString)\n    const handRanksString = card1.rank + card2.rank\n\n    if (card1.suit === card2.suit) {\n        const suitedBetMultipliers = suitedPreFlopHandsToBetMultipliers[handRanksString]\n        if (suitedBetMultipliers) {\n            console.log(\"Preflop cards are suited, and match one of the suited starting hands\")\n            const [callToMult, raiseToMult] = suitedBetMultipliers;\n            makeBetUsingMultipliers(callToMult, raiseToMult)\n            return\n        }\n    }\n\n    const betMultipliers = preFlopHandsToBetMultipliers[handRanksString]\n    if (!betMultipliers) {\n        if (Math.random() > .95) {\n            // 5% of the time we will randomly limp in\n            console.log(\"Even though this isn't a hand we usually play, randomly limping in if it's cheap.\")\n            makeBetUsingMultipliers(3, 1)\n            return\n        }\n\n        console.log('Checking or folding.')\n        checkOrFold()\n        return\n    }\n\n    const [callToMult, raiseToMult] = betMultipliers;\n    makeBetUsingMultipliers(callToMult, raiseToMult)\n}\n\nfunction postflop(cardsString, boardCardsString, playersInHand, potSizeAtStartOfRound) {\n    var cards = cardStringToObj(cardsString)\n    var boardCards = cardStringToObj(boardCardsString)\n\n    const myhand = myPokerHand(cards, boardCards)\n    const usedHoleCards = getHoleCardsUsed(cards, boardCards)\n\n    const betOptions = []\n\n    if (myhand === mb.STRAIGHT_FLUSH && usedHoleCards.length > 0) {\n        betOptions.push({\n            message: \"Straight flush!\",\n            callTo: mb.ALL,\n            raiseTo: 4 * boardCards.length\n        })\n    }\n\n    if (myhand === mb.FOUR_OF_A_KIND && usedHoleCards.length > 0) {\n        betOptions.push({\n            message: \"Four of a kind\",\n            callTo: mb.ALL,\n            raiseTo: 4 * boardCards.length\n        })\n    }\n\n    // full houses\n    if (myhand === mb.FULL_HOUSE && usedHoleCards.length > 0) {\n        if (usedHoleCards === 2) {\n            if (myPokerHand([], boardCards) === mb.THREE_OF_A_KIND) {\n                if (boardCards.every(c => c.ranknum < cards[0].ranknum)) {\n                    betOptions.push({\n                        message: \"Three of a kind on the board and we have a pocket overpair\",\n                        callTo: mb.ALL,\n                        raiseTo: 4 * boardCards.length\n                    })\n                } else {\n                    betOptions.push({\n                        message: \"Three of a kind on the board and we have a pocket pair (not overpair)\",\n                        callTo: 10,\n                        raiseTo: 3\n                    })\n                }\n            } else {\n                betOptions.push({\n                    message: \"Full house using at least both hole cards\",\n                    callTo: mb.ALL,\n                    raiseTo: 4 * boardCards.length\n                })\n            }\n        } else if (myPokerHand([], boardCards) === mb.THREE_OF_A_KIND) {\n            betOptions.push({\n                message: \"Full house using 1 hole card, but trips on the board\",\n                callTo: 5,\n                raiseTo: 5\n            })\n        } else {\n            betOptions.push({\n                message: \"Full house using 1 hole card, no trips on the board\",\n                callTo: mb.ALL,\n                raiseTo: 8\n            })\n        }\n    }\n\n    // flushes\n    if (myhand === mb.FLUSH) {\n        if (usedHoleCards.length === 2) {\n            betOptions.push({\n                message: \"Flush using both our hole cards\",\n                callTo: mb.ALL,\n                raiseTo: 7\n            })\n        } else if (usedHoleCards.length === 1) {\n            if ([\"A\", \"K\"].includes(usedHoleCards[0].rank)) {\n                betOptions.push({\n                    message: \"Flush using 1 hole card (A or K)\",\n                    callTo: mb.ALL,\n                    raiseTo: 4\n                })\n            }\n\n            betOptions.push({\n                message: \"Flush using 1 hole card (not A or K)\",\n                callTo: 5,\n                raiseTo: 0\n            })\n        } else {\n            // Flush on the board\n            // Check if we beat the board and have A or K\n            const hasHighCardInSuit = cards\n                .some(card => [\"A\", \"K\"]\n                .includes(card.rank) && card.suit === boardCards[0].suit)\n\n            if (hasHighCardInSuit) {\n                betOptions.push({\n                    message: \"Flush using 1 hole card (A or K)\",\n                    callTo: mb.ALL,\n                    raiseTo: 4\n                })\n            } else {\n                if (Math.random() > .9) {\n                    betOptions.push({\n                        message: \"Flush on the board, but randomly bluffing 10% of the time\",\n                        callTo: 0,\n                        raiseTo: mb.ALL\n                    })\n                } else {\n                    // Right now this is just for logging\n                    betOptions.push({\n                        message: \"Flush on the board\",\n                        callTo: 0,\n                        raiseTo: 0\n                    })\n                }\n            }\n        }\n    }\n\n    // straights\n    if (myhand === mb.STRAIGHT) {\n        if (usedHoleCards.length === 2) {\n            if (fourToFlush(boardCards)) {\n                betOptions.push({\n                    message: \"Straight using both hole cards, but 4 to flush on the board\",\n                    callTo: 5,\n                    raiseTo: 5\n                })\n            } else {\n                betOptions.push({\n                    message: \"Straight using both hole cards, wahoo!\",\n                    callTo: mb.ALL,\n                    raiseTo: 7\n                })\n            }\n        } else if (usedHoleCards.length === 1) {\n            if (fourToFlush(boardCards)) {\n                betOptions.push({\n                    message: \"Straight using 1 hole card, but 4 to flush on the board\",\n                    callTo: 3,\n                    raiseTo: 3\n                })\n            } else {\n                betOptions.push({\n                    message: \"Straight using only 1 hole card\",\n                    callTo: 20,\n                    raiseTo: 3\n                })\n            }\n        } else {\n            // Straight on the board\n            highestBoardCardRankNum = Math.max(...boardCards.map(c => c.rankNum))\n            if (cards.some(c => c.rankNum === highestBoardCardRankNum + 1)) {\n                // We beat the straight on the board\n                if (fourToFlush(boardCards)) {\n                    betOptions.push({\n                        message: \"We beat the straight on the board, but there are 4 to a flush\",\n                        callTo: 0,\n                        raiseTo: 0\n                    })\n                } else {\n                    betOptions.push({\n                        message: \"Straight on the board, but we have a better straight\",\n                        callTo: mb.ALL,\n                        raiseTo: 5\n                    })\n                }\n            } else {\n                // Right now this is just for logging\n                betOptions.push({\n                    message: \"Straight on the board\",\n                    callTo: 0,\n                    raiseTo: 0\n                })\n            }\n        }\n    }\n\n    // trips (only using one card in hand)\n    if (myhand == mb.THREE_OF_A_KIND && usedHoleCards.length >= 1) {\n        if (fourToFlushOrStraight(boardCards)) {\n            betOptions.push({\n                message: \"Trips using at least 1 hole card, but 4 to flush/straight on the board\",\n                callTo: 3,\n                raiseTo: 3\n            })\n        } else if (usedHoleCards === 2) {\n            betOptions.push({\n                message: \"Pocket pair that hit trips or better\",\n                callTo: mb.ALL,\n                raiseTo: 3 * boardCards.length\n            })\n        } else {\n            betOptions.push({\n                message: \"Trips using 1 hole card\",\n                callTo: 25,\n                raiseTo: 3 * boardCards.length\n            })\n        }\n    }\n\n    // two pair (using both hole cards)\n    if (myhand == mb.TWO_PAIR && usedHoleCards.length == 2) {\n        if (fourToFlushOrStraight(boardCards)) {\n            betOptions.push({\n                message: \"Two pair using both hole cards but 4 to flush/straight on the board\",\n                callTo: 3,\n                raiseTo: 3\n            })\n        } else {\n            if (cards[0].rank === cards[1].rank) {\n                if (boardCards.every(c => c.ranknum < cards[0].ranknum)) {\n                    betOptions.push({\n                        message: \"Pair on the board and pocket pair overpair\",\n                        callTo: 15,\n                        raiseTo: 3\n                    })\n                } else {\n                    betOptions.push({\n                        message: \"Pair on the board and pocket pair (not overpair)\",\n                        callTo: 5,\n                        raiseTo: 1\n                    })\n                }\n            } else {\n                betOptions.push({\n                    message: \"Two pair using both hole cards\",\n                    callTo: 25,\n                    raiseTo: 2 * boardCards.length\n                })\n            }\n        }\n    }\n\n    // pair (possible 2 pair with one pair on the board)\n    if ([mb.PAIR, mb.TWO_PAIR].includes(myhand) && usedHoleCards.length == 1) {\n        if (fourToFlushOrStraight(boardCards)) {\n            betOptions.push({\n                message: \"Pair, but 4 to flush/straight on the board\",\n                callTo: 3,\n                raiseTo: 3\n            })\n        } else {\n            boardCardRankNumDescending = boardCards.map(c => c.ranknum).sort((a, b) => b - a)\n            if (usedHoleCards[0].ranknum === boardCardRankNumDescending[0]) {\n                if (boardCards.length === 3) {\n                    if (playersInHand === 2) {\n                        betOptions.push({\n                            message: \"Top pair (only 1 other player in hand)\",\n                            callTo: 20,\n                            raiseTo: 5\n                        })\n                    } else {\n                        betOptions.push({\n                            message: \"Top pair\",\n                            callTo: 10,\n                            raiseTo: 3\n                        })\n                    }\n                } else if (boardCards.length === 4) {\n                    if (playersInHand === 2) {\n                        betOptions.push({\n                            message: \"Top pair (only 1 other player in hand)\",\n                            callTo: 20,\n                            raiseTo: 10\n                        })\n                    } else {\n                        betOptions.push({\n                            message: \"Top pair\",\n                            callTo: 10,\n                            raiseTo: 0\n                        })\n                    }\n                } else {\n                    if (playersInHand === 2) {\n                        betOptions.push({\n                            message: \"Top pair (only 1 other player in hand)\",\n                            callTo: 30,\n                            raiseTo: 10\n                        })\n                    } else {\n                        betOptions.push({\n                            message: \"Top pair\",\n                            callTo: 10,\n                            raiseTo: 0\n                        })\n                    }\n                }\n            } else if (usedHoleCards[0].ranknum === boardCardRankNumDescending[1]) {\n                if (boardCards.length === 3) {\n                    betOptions.push({\n                        message: \"Second pair\",\n                        callTo: 5,\n                        raiseTo: 2\n                    })\n                } else {\n                    betOptions.push({\n                        message: \"Second pair\",\n                        callTo: 5,\n                        raiseTo: 0\n                    })\n                }\n            }\n            betOptions.push({\n                message: \"low pair\",\n                callTo: 3,\n                raiseTo: 0\n            })\n        }\n    }\n\n    // pocket pairs\n    if (myhand === mb.PAIR && usedHoleCards === 2) {\n        if (fourToFlushOrStraight(boardCards)) {\n            betOptions.push({\n                message: \"Pocket pair, but 4 to flush/straight on the board\",\n                callTo: 3,\n                raiseTo: 3\n            })\n        } else {\n            if (boardCards.every(c => c.ranknum < cards[0].ranknum)) {\n                betOptions.push({\n                    message: \"Pocket pair overpair\",\n                    callTo: mb.ALL,\n                    raiseTo: 5\n                })\n            } else if (cards[0].ranknum > 9 && playersInHand == 2) {\n                betOptions.push({\n                    message: \"Pocket pair isn't top pair but it's high, and only 1 other player\",\n                    callTo: 10,\n                    raiseTo: 5\n                })\n            }\n        }\n    }\n\n    // Flush Draw\n    if (hasFlushDraw(cards, boardCards)) {\n        if (boardCards.length === 3 && playersInHand === 2 && Math.random > .5) {\n            betOptions.push({\n                message: \"flush draw using both hole cards (3 cards on board), only 1 other player in hand, randomly going all in half the time\",\n                callTo: 10,\n                raiseTo: mb.ALL\n            })\n        } else if (boardCards.length !== 5) {\n            betOptions.push({\n                message: \"flush draw using both hole cards\",\n                callTo: 10,\n                raiseTo: 0\n            })\n        }\n    }\n\n    // Open ended straight draw\n    if (checkStraightOrDrawOfLength(cards.concat(boardCards), 4) && !checkStraightOrDrawOfLength(boardCards, 4)) {\n        if (boardCards.length === 3 && playersInHand === 2) {\n            if (Math.random > .7) {\n                betOptions.push({\n                    message: \"straight draw, randomly going all in 30% of the time\",\n                    callTo: 12,\n                    raiseTo: mb.ALL\n                })\n            } else {\n                betOptions.push({\n                    message: \"open ended straight draw using at least 1 hole card\",\n                    callTo: 12,\n                    raiseTo: 12\n                })\n            }\n        } else if (boardCards.length !== 5) {\n            betOptions.push({\n                message: \"open ended straight draw using at least 1 hole card\",\n                callTo: 10,\n                raiseTo: 10\n            })\n        }\n    }\n\n    if (betOptions.length === 0 && playersInHand === 2) {\n        if (Math.random() > .97) {\n            betOptions.push({\n                message: \"Random bluff 3% of the time against 1 other player\",\n                callTo: 0,\n                raiseTo: mb.ALL\n            })\n        }\n        console.log(\"Nothing interesting going on with our hand. Check/folding\")\n        checkOrFold()\n        return\n    }\n\n    highestCallTo = 0\n    highestRaiseTo = 0\n    console.log(\"Considering betting based on these things:\")\n    betOptions.forEach(betOption => {\n        console.log(\"callTo: \" + betOption.callTo + \", raiseTo: \" + betOption.raiseTo + \", \" + betOption.message)\n        if (highestCallTo === mb.ALL || betOption.callTo === mb.ALL) {\n            highestCallTo = mb.ALL\n        } else {\n            highestCallTo = Math.max(highestCallTo, betOption.callTo)\n        }\n        if (highestRaiseTo === mb.ALL || betOption.RaiseTo === mb.ALL) {\n            highestRaiseTo = mb.ALL\n        } else {\n            highestRaiseTo = Math.max(highestRaiseTo, betOption.raiseTo)\n        }\n    })\n\n    console.log(\"Will call to: \" + highestCallTo + \" or raise to: \" + highestRaiseTo)\n    makeBetUsingMultipliers(highestCallTo, highestRaiseTo)\n\n    return\n}\n\nexport function handleShowdown() {\n    const seat = game.client_perspective\n    if (game.n_players_in_hand > 1 && game.players[seat].is_sitting_in && !game.players[seat].is_folded) {\n        console.log('SHOWDOWN WITH ME IN IT')\n        console.log('# players in showdown:', game.n_players_in_hand)\n        tauntOpportunity = Object.entries(game.players).some(([i, player]) =>\n            player.is_sitting_in && !player.is_folded && player.chips === 0 && i !== seat + ''\n        )\n        console.log('tauntOpportunity', tauntOpportunity)\n    }\n}\n\nexport function handlePotDistribution(potData) {\n    const seat = game.client_perspective;\n    if (tauntOpportunity && potData.winners[seat] && Object.keys(potData.winners).length === 1) {\n        // TODO will taunt before animations finish. eventually, add a delay or wait for some event\n        // indicating animations are done\n        console.log('Taunting because I knocked someone out!')\n        socket.emit('taunt', {taunt: 16, id: game.table_id, group_id: game.group_id})\n    }\n    tauntOpportunity = false\n}\n\nfunction getHoleCardsUsed(holeCards, boardCards) {\n    const withBoth = myPokerHand(holeCards, boardCards);\n    const noHoleCards = myPokerHand([], boardCards);\n    if (withBoth === noHoleCards) {\n        return []\n    }\n    const [withFirst, withSecond] = holeCards.map(holeCard => myPokerHand([holeCard], boardCards))\n    if (withFirst === withBoth && withSecond === withBoth) {\n        // either card gets you just as good a hand as with both of them. return the one with higher rank\n        return holeCards[0].rankNum > holeCards[1].rankNum ? [holeCards[0]] : [holeCards[1]]\n    } else if (withBoth === withFirst) {\n        return [holeCards[0]]\n    } else if (withBoth === withSecond) {\n        return [holeCards[1]]\n    } else {\n        return holeCards\n    }\n}\n\nfunction checkStraightOrDrawOfLength(allCards, lengthOfDraw) {\n    const sortedRanks = allCards.sort((a, b) => a.ranknum - b.ranknum).map(c => c.rank)\n    let uniqueRanksInOrder = [... new Set(sortedRanks)].join('')\n    if (uniqueRanksInOrder.endsWith(\"A\")) {\n        uniqueRanksInOrder = \"A\" + uniqueRanksInOrder\n    }\n\n    for (i = 0; i <= uniqueRanksInOrder.length - lengthOfDraw; i++) {\n        subStringToCheck = uniqueRanksInOrder.slice(i, i + lengthOfDraw)\n        if (\"A23456789TJQKA\".indexOf(subStringToCheck) !== -1) {\n            return mb.STRAIGHT;\n        }\n    }\n}\n\nfunction myPokerHand(handCards, boardCards) {\n    const rankToCount = {};\n    const suitToCount = {};\n    const allCards = handCards.concat(boardCards);\n    allCards.forEach(card => {\n        const currentRankCount = rankToCount[card.rank] || 0;\n        rankToCount[card.rank] = currentRankCount + 1;\n\n        const currentSuitCount = suitToCount[card.suit] || 0;\n        suitToCount[card.suit] = currentSuitCount + 1;\n    });\n\n    let highestCount = 0\n    let secondHighestCount = 0\n    Object.entries(rankToCount).forEach(([rank, count]) => {\n        if (count > highestCount) {\n            secondHighestCount = highestCount\n            highestCount = count\n        }\n        else if (count > secondHighestCount) {\n            secondHighestCount = count\n        }\n    });\n\n    // Check straight flush\n    var hasFlush = false\n    var hasStraightFlush = false\n    Object.entries(suitToCount).forEach(([suit, count]) => {\n        if (count >= 5) {\n            hasFlush = true\n            const cardsOfSuit = allCards.filter(card => card.suit === suit)\n            if (checkStraightOrDrawOfLength(cardsOfSuit, 5)) {\n                hasStraightFlush = true\n            }\n        }\n    })\n    if (hasStraightFlush) {\n        return mb.STRAIGHT_FLUSH\n    }\n\n    // Check 4 of a kind\n    if (highestCount === 4) {\n        return mb.FOUR_OF_A_KIND;\n    }\n\n    // Check full house\n    if (highestCount === 3 && secondHighestCount >= 2) {\n        return mb.FULL_HOUSE;\n    }\n\n    // Check flush\n    if (hasFlush) {\n        return mb.FLUSH;\n    }\n\n    // Check straight\n    if (checkStraightOrDrawOfLength(allCards, 5)) {\n        return mb.STRAIGHT\n    }\n\n    // Check 3 of a kind\n    if (highestCount === 3) {\n        return mb.THREE_OF_A_KIND;\n    }\n\n    // Check 2 pair\n    if (highestCount === 2 && secondHighestCount === 2) {\n        return mb.TWO_PAIR;\n    }\n\n    // Check pair\n    if (highestCount === 2) {\n        return mb.PAIR;\n    }\n\n    return mb.HIGH_CARD;\n}\n\nfunction fourToFlushOrStraight(allCards) {\n    return fourToFlush(allCards) || checkStraightOrDrawOfLength(allCards, 4)\n}\n\n// Some duplicated work here that we could clean up\nfunction fourToFlush(allCards) {\n    const suitToCount = {};\n    allCards.forEach(card => {\n        const currentSuitCount = suitToCount[card.suit] || 0;\n        suitToCount[card.suit] = currentSuitCount + 1;\n    });\n\n    return Object.values(suitToCount).some((count) => {\n        return count === 4\n    })\n}\n\n// For now we are only considering flush draws that use both hole cards\nfunction hasFlushDraw(handCards, boardCards) {\n    const suitToCount = {};\n    const allCards = handCards.concat(boardCards);\n    allCards.forEach(card => {\n        const currentSuitCount = suitToCount[card.suit] || 0;\n        suitToCount[card.suit] = currentSuitCount + 1;\n    });\n\n    return Object.entries(suitToCount).some(([suit, count]) => {\n        return count === 4 && handCards.every(c => c.suit === suit)\n    })\n}\n","import {checkIfTurnAndPlay, handleShowdown, handlePotDistribution} from './playhand'\n\nsetInterval(checkIfTurnAndPlay, 2500)\nsocket.on('is in showdown', handleShowdown)\nsocket.on('distributing pot', handlePotDistribution)"],"names":["$f86c89a0cb56440a$var$tauntOpportunity","$f86c89a0cb56440a$var$mb","BIG_BLIND","game","big_blind","ALL","HIGH_CARD","PAIR","TWO_PAIR","THREE_OF_A_KIND","STRAIGHT","FLUSH","FULL_HOUSE","FOUR_OF_A_KIND","STRAIGHT_FLUSH","$f86c89a0cb56440a$var$preFlopHandsToBetMultipliers","AA","KK","QQ","JJ","TT","AK","AQ","AJ","A5","AT","A9","A8","KQ","KJ","KT","K9","QJ","QT","Q9","Q8","JT","J9","J8","J7","T9","$f86c89a0cb56440a$var$suitedPreFlopHandsToBetMultipliers","A7","A6","A4","A3","A2","K8","T8","T7","$f86c89a0cb56440a$var$checkOrFold","action_widget","to_call","$f86c89a0cb56440a$var$checkOrCall","execute_fold","execute_check_call","$f86c89a0cb56440a$var$makeBetUsingMultipliers","callToMult","raiseToMult","betSizeIfAllIn","stack_size","bet_in_front","callToLimit","raiseToLimit","betInFront","betSizeIfCall","minBet","threshold_values","length","undefined","console","info","bet_button","raise_button","log","update_slider_by_value","sizing_input","value","execute_bet_raise","all_in","execute","call_button","$f86c89a0cb56440a$var$makeBetOfSize","$f86c89a0cb56440a$var$nonNumericRankToNum","T","J","Q","K","A","$f86c89a0cb56440a$export$1c585bc21eb51405","cardsString","cards","split","filter","card","map","cardString","rank","suit","ranknum","parseInt","sort","a","b","$f86c89a0cb56440a$var$checkStraightOrDrawOfLength","allCards","lengthOfDraw","sortedRanks","c","uniqueRanksInOrder","Set","join","endsWith","i","subStringToCheck","slice","indexOf","$f86c89a0cb56440a$var$myPokerHand","handCards","boardCards","rankToCount","suitToCount","concat","forEach","currentRankCount","currentSuitCount","highestCount","secondHighestCount","Object","entries","count","hasFlush","hasStraightFlush","$f86c89a0cb56440a$var$fourToFlushOrStraight","$f86c89a0cb56440a$var$fourToFlush","values","some","setInterval","async","players","client_perspective","card_str","Promise","resolve","setTimeout","holeCards","board","boardCardsLogMsg","handString","boardString","ruleset_name","game_options_widget","allow_easy_reveal","easy_reveal","is_checked","clicked","bomb_pot_value","bomb_pot","$f86c89a0cb56440a$var$setDefaultGameOptions","e","card1","card2","handRanksString","suitedBetMultipliers","betMultipliers","Math","random","$f86c89a0cb56440a$var$preflop","boardCardsString","playersInHand","potSizeAtStartOfRound","myhand","usedHoleCards","withBoth","noHoleCards","withFirst","withSecond","holeCard","rankNum","$f86c89a0cb56440a$var$getHoleCardsUsed","betOptions","push","message","callTo","raiseTo","every","includes","highestBoardCardRankNum","max","boardCardRankNumDescending","$f86c89a0cb56440a$var$hasFlushDraw","highestCallTo","highestRaiseTo","betOption","RaiseTo","$f86c89a0cb56440a$var$postflop","n_players_in_hand","$f86c89a0cb56440a$var$playHand","socket","on","seat","is_sitting_in","is_folded","player","chips","potData","winners","keys","emit","taunt","id","table_id","group_id"],"version":3,"file":"index.js.map"}