{"mappings":"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","sources":["util.js","constants.js","handUtils.js","playhand.js","index.js"],"sourcesContent":["const nonNumericRankToNum = {\n  T: 10,\n  J: 11,\n  Q: 12,\n  K: 13,\n  A: 14,\n};\n\nexport function cardStringToObj(cardsString) {\n  const cards = cardsString\n    .split('?')\n    .filter((card) => card !== '')\n    .map((cardString) => {\n      const rank = cardString[0];\n      const suit = cardString[1];\n\n      let ranknum = nonNumericRankToNum[rank] || parseInt(rank);\n      // Rank number should go 0 - 12\n      ranknum -= 2;\n\n      return {\n        suit,\n        rank,\n        ranknum,\n        cardString,\n      };\n    });\n  cards.sort((a, b) => b.ranknum - a.ranknum);\n  return cards;\n}\n","export const HANDS = {\n  HIGH_CARD: 'HIGH CARD',\n  PAIR: 'PAIR',\n  TWO_PAIR: 'TWO PAIR',\n  THREE_OF_A_KIND: 'THREE OF A KIND',\n  STRAIGHT: 'STRAIGHT',\n  FLUSH: 'FLUSH',\n  FULL_HOUSE: 'FULL HOUSE',\n  FOUR_OF_A_KIND: 'FOUR OF A KIND',\n  STRAIGHT_FLUSH: 'STRAIGHT FLUSH',\n};\n\nexport const RANKED_HANDS = {\n  [HANDS.HIGH_CARD]: 1,\n  [HANDS.PAIR]: 2,\n  [HANDS.TWO_PAIR]: 3,\n  [HANDS.THREE_OF_A_KIND]: 4,\n  [HANDS.STRAIGHT]: 5,\n  [HANDS.FLUSH]: 6,\n  [HANDS.FULL_HOUSE]: 7,\n  [HANDS.FOUR_OF_A_KIND]: 8,\n  [HANDS.STRAIGHT_FLUSH]: 9,\n};\n\nexport const RANK_TO_NUMRANK = {\n  A: 12,\n  K: 11,\n  Q: 10,\n  J: 9,\n  T: 8,\n  9: 7,\n  8: 6,\n  7: 5,\n  6: 4,\n  5: 3,\n  4: 2,\n  3: 1,\n  2: 0,\n};\n\nexport const ALL_CARD_STRINGS = [\n  '2D',\n  '2C',\n  '2H',\n  '2S',\n  '3D',\n  '3C',\n  '3H',\n  '3S',\n  '4D',\n  '4C',\n  '4H',\n  '4S',\n  '5D',\n  '5C',\n  '5H',\n  '5S',\n  '6D',\n  '6C',\n  '6H',\n  '6S',\n  '7D',\n  '7C',\n  '7H',\n  '7S',\n  '8D',\n  '8C',\n  '8H',\n  '8S',\n  '9D',\n  '9C',\n  '9H',\n  '9S',\n  'TD',\n  'TC',\n  'TH',\n  'TS',\n  'JD',\n  'JC',\n  'JH',\n  'JS',\n  'QD',\n  'QC',\n  'QH',\n  'QS',\n  'KD',\n  'KC',\n  'KH',\n  'KS',\n  'AD',\n  'AC',\n  'AH',\n  'AS',\n];\n","import { HANDS, RANK_TO_NUMRANK } from './constants';\n\nexport function checkStraightOrDrawOfLength(allCards, lengthOfDraw) {\n  const sortedRanks = allCards\n    .sort((a, b) => b.ranknum - a.ranknum)\n    .map((c) => c.rank);\n  let uniqueRanksInOrder = [...new Set(sortedRanks)].join('');\n  if (uniqueRanksInOrder.startsWith('A')) {\n    uniqueRanksInOrder = uniqueRanksInOrder + 'A';\n  }\n\n  for (let i = 0; i <= uniqueRanksInOrder.length - lengthOfDraw; i++) {\n    const subStringToCheck = uniqueRanksInOrder.slice(i, i + lengthOfDraw);\n    if ('AKQJT98765432A'.includes(subStringToCheck)) {\n      return subStringToCheck[0];\n    }\n  }\n}\n\nexport function myPokerHand(handCards, boardCards) {\n  const rankToCount = new Map();\n  const suitToCount = new Map();\n  const allCards = handCards.concat(boardCards);\n  allCards.sort((a, b) => b.ranknum - a.ranknum);\n  allCards.forEach((card) => {\n    rankToCount.set(card.rank, (rankToCount.get(card.rank) || 0) + 1);\n    suitToCount.set(card.suit, (suitToCount.get(card.suit) || 0) + 1);\n  });\n\n  let highestRankAndCount = { count: 0 };\n  let secondHighestRankAndCount = { count: 0 };\n  rankToCount.forEach((count, rank) => {\n    // maps preserve insertion order, so we know higher ranks always come first\n    if (count > highestRankAndCount.count) {\n      secondHighestRankAndCount = highestRankAndCount;\n      highestRankAndCount = { rank, count };\n    } else if (count > secondHighestRankAndCount.count) {\n      secondHighestRankAndCount = { rank, count };\n    }\n  });\n\n  // Check straight flush\n  let flushRanks;\n  let straightFlushTopRank;\n  suitToCount.forEach((count, suit) => {\n    if (count >= 5) {\n      const cardsOfSuit = allCards.filter((card) => card.suit === suit);\n      flushRanks = cardsOfSuit.map((card) => card.rank).slice(0, 5);\n      straightFlushTopRank = checkStraightOrDrawOfLength(cardsOfSuit, 5);\n    }\n  });\n\n  if (straightFlushTopRank) {\n    return {\n      hand: HANDS.STRAIGHT_FLUSH,\n      handRanks: [straightFlushTopRank],\n      kickers: [],\n    };\n  }\n\n  // Check 4 of a kind\n  if (highestRankAndCount.count === 4) {\n    const fourOfAKindRank = highestRankAndCount.rank;\n    const cardsMinusFourOfAKind = allCards.filter(\n      (card) => card.rank != fourOfAKindRank\n    );\n\n    return {\n      hand: HANDS.FOUR_OF_A_KIND,\n      handRanks: [fourOfAKindRank],\n      kickers: getTopNRanks(cardsMinusFourOfAKind, 1),\n    };\n  }\n\n  // Check full house\n  if (highestRankAndCount.count === 3 && secondHighestRankAndCount.count >= 2) {\n    const tripRank = highestRankAndCount.rank;\n    const pairRank = secondHighestRankAndCount.rank;\n\n    return {\n      hand: HANDS.FULL_HOUSE,\n      handRanks: [tripRank, pairRank],\n      kickers: [],\n    };\n  }\n\n  // Check flush\n  if (flushRanks) {\n    return {\n      hand: HANDS.FLUSH,\n      handRanks: flushRanks,\n      kickers: [],\n    };\n  }\n\n  // Check straight\n  const topRankInStraight = checkStraightOrDrawOfLength(allCards, 5);\n  if (topRankInStraight) {\n    return {\n      hand: HANDS.STRAIGHT,\n      handRanks: [topRankInStraight],\n      kickers: [],\n    };\n  }\n\n  // Check 3 of a kind\n  if (highestRankAndCount.count === 3) {\n    const tripRank = highestRankAndCount.rank;\n    var cardsMinusTrips = allCards.filter((card) => card.rank != tripRank);\n\n    return {\n      hand: HANDS.THREE_OF_A_KIND,\n      handRanks: [tripRank],\n      kickers: getTopNRanks(cardsMinusTrips, 2),\n    };\n  }\n\n  // Check 2 pair\n  if (\n    highestRankAndCount.count === 2 &&\n    secondHighestRankAndCount.count === 2\n  ) {\n    const pairRanks = [\n      highestRankAndCount.rank,\n      secondHighestRankAndCount.rank,\n    ];\n\n    var cardsMinusPairs = allCards.filter(\n      (card) => !pairRanks.includes(card.rank)\n    );\n\n    return {\n      hand: HANDS.TWO_PAIR,\n      handRanks: pairRanks,\n      kickers: getTopNRanks(cardsMinusPairs, 1),\n    };\n  }\n\n  // Check pair\n  if (highestRankAndCount.count === 2) {\n    const pairRank = highestRankAndCount.rank;\n    var cardsMinusPair = allCards.filter((card) => card.rank != pairRank);\n\n    return {\n      hand: HANDS.PAIR,\n      handRanks: [pairRank],\n      kickers: getTopNRanks(cardsMinusPair, 3),\n    };\n  }\n\n  return {\n    hand: HANDS.HIGH_CARD,\n    handRanks: [],\n    kickers: getTopNRanks(allCards, 5),\n  };\n}\n\n// We're not sorting because we're assuming the cards are already sorted (beginning of myPokerHand)\nexport function getTopNRanks(cards, n) {\n  return cards.map((card) => card.rank).slice(0, n);\n}\n","import { cardStringToObj } from './util';\nimport { checkStraightOrDrawOfLength, myPokerHand } from './handUtils';\nimport { HANDS } from './constants';\n\nlet tauntOpportunity = false; // set to true if I'm in a showdown and someone else is all-in\n\nconst mb = {\n  // constants\n  BIG_BLIND: game.big_blind / 100, // not accounting for someone changing BB mid-game\n  ALL: 'all',\n};\n\nconst preFlopHandsToBetMultipliers = {\n  // hand_ranks: [call_to, raise_to]\n  // call_to and raise_to are multipliers of the big blind\n  AA: [mb.ALL, mb.ALL],\n  72: [mb.ALL, mb.ALL],\n  KK: [mb.ALL, mb.ALL],\n  QQ: [mb.ALL, mb.ALL],\n  JJ: [mb.ALL, mb.ALL],\n  TT: [mb.ALL, mb.ALL],\n  99: [10, 3],\n  88: [10, 3],\n  AK: [mb.ALL, mb.ALL],\n  AQ: [30, 3],\n  AJ: [30, 3],\n  A5: [3, 1],\n  AT: [8, 3],\n  A9: [1, 1],\n  A8: [1, 1],\n  KQ: [8, 3],\n  KJ: [8, 3],\n  KT: [3, 3],\n  K9: [1, 1],\n  QJ: [3, 1],\n  QT: [3, 1],\n  Q9: [1, 1],\n  Q8: [1, 1],\n  JT: [3, 1],\n  J9: [1, 1],\n  J8: [1, 1],\n  J7: [1, 1],\n  T9: [1, 1],\n  77: [3, 1],\n  66: [3, 1],\n  55: [3, 1],\n  44: [3, 1],\n  33: [3, 1],\n  22: [3, 1],\n};\n\nconst suitedPreFlopHandsToBetMultipliers = {\n  AK: [mb.ALL, mb.ALL],\n  AQ: [mb.ALL, mb.ALL],\n  AJ: [30, 5],\n  AT: [10, 5],\n  A9: [10, 3],\n  A8: [8, 3],\n  A7: [6, 1],\n  A6: [6, 1],\n  A5: [8, 3],\n  A4: [5, 1],\n  A3: [5, 1],\n  A2: [5, 1],\n  KQ: [10, 5],\n  KJ: [10, 5],\n  KT: [8, 3],\n  K9: [6, 3],\n  K8: [1, 3],\n  QJ: [10, 5],\n  QT: [8, 1],\n  Q9: [3, 1],\n  Q8: [3, 1],\n  JT: [10, 3],\n  J9: [3, 1],\n  J8: [3, 1],\n  J7: [3, 1],\n  T9: [6, 3],\n  T8: [1, 1],\n  T7: [1, 1],\n  98: [5, 1],\n  97: [1, 1],\n  87: [5, 1],\n  86: [1, 1],\n  76: [1, 1],\n  75: [1, 1],\n  65: [1, 1],\n  64: [1, 1],\n  54: [1, 1],\n  43: [1, 1],\n  32: [1, 1],\n};\n\nexport async function checkIfTurnAndPlay() {\n  if (\n    !game.action_widget ||\n    !game.players[game.client_perspective].cards.card_str\n  ) {\n    // seems like sometimes action_widget will be truthy but there are no cards... skip\n    return;\n  }\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  const holeCards = game.players[game.client_perspective].cards.card_str;\n  const boardCards = game.board.card_str;\n  const boardCardsLogMsg = boardCards\n    ? ` and the board shows ${boardCards}.`\n    : '.';\n  console.log(`My hole cards are ${holeCards}${boardCardsLogMsg}`);\n  playHand(holeCards, boardCards);\n}\n\nfunction setDefaultGameOptions() {\n  if (\n    game.game_options_widget.allow_easy_reveal &&\n    !game.game_options_widget.easy_reveal.is_checked()\n  ) {\n    game.game_options_widget.easy_reveal.clicked();\n  }\n  if (\n    game.game_options_widget.bomb_pot_value &&\n    !game.game_options_widget.bomb_pot.is_checked()\n  ) {\n    game.game_options_widget.bomb_pot.clicked();\n  }\n}\n\nfunction checkOrFold() {\n  if (game.action_widget.to_call === 0) {\n    checkOrCall();\n  } else {\n    game.action_widget.execute_fold();\n  }\n}\n\nfunction checkOrCall() {\n  game.action_widget.execute_check_call();\n}\n\nfunction makeBetOfSize(callToLimit, raiseToLimit) {\n  // TODO later on, take in increment size so we can do smaller raises\n  const betInFront = game.action_widget.bet_in_front;\n  const betSizeIfCall = betInFront + game.action_widget.to_call / 100;\n  const betSizeIfAllIn = betInFront + game.action_widget.stack_size;\n  const minBet = game.action_widget.threshold_values.length\n    ? game.action_widget.threshold_values[0]\n    : undefined;\n  console.info(\n    `Raise to limit: ${raiseToLimit}. Min bet: ${minBet}. Call to limit: ${callToLimit}. Bet size if call: ${betSizeIfCall}.`\n  );\n  if (game.action_widget.bet_button || game.action_widget.raise_button) {\n    if (minBet <= raiseToLimit) {\n      console.log(\n        raiseToLimit === betSizeIfAllIn\n          ? 'Going all in.'\n          : `Raising to ${raiseToLimit}.`\n      );\n      game.action_widget.update_slider_by_value(raiseToLimit);\n      game.action_widget.sizing_input.value = raiseToLimit;\n      game.action_widget.execute_bet_raise();\n      return;\n    }\n  }\n  // If we get here, either raising wasn't an option in the game or the min bet was too high for us.\n  if (game.action_widget.all_in && betSizeIfAllIn <= raiseToLimit) {\n    console.log(\"Can't/won't raise; going all in instead.\");\n    game.action_widget.all_in.execute();\n  } else if (game.action_widget.call_button && betSizeIfCall <= callToLimit) {\n    console.log(\"Can't/won't raise; calling instead.\");\n    checkOrCall();\n  } else {\n    console.log('Checking/folding.');\n    checkOrFold();\n  }\n}\n\nfunction makeBetUsingMultipliers(callToMult, raiseToMult) {\n  const betSizeIfAllIn =\n    game.action_widget.stack_size + game.action_widget.bet_in_front;\n  const callToLimit =\n    callToMult === mb.ALL ? betSizeIfAllIn : callToMult * mb.BIG_BLIND;\n  const raiseToLimit =\n    raiseToMult === mb.ALL ? betSizeIfAllIn : raiseToMult * mb.BIG_BLIND;\n  makeBetOfSize(callToLimit, raiseToLimit);\n}\n\nfunction playHand(handString, boardString) {\n  if (game.ruleset_name !== 'NL Texas Holdem') {\n    console.log(\n      `Folding/checking because we aren't playing 'NL Texas Holdem'. The game is ${game.ruleset_name}.`\n    );\n    checkOrFold();\n    return;\n  }\n  try {\n    setDefaultGameOptions();\n  } catch (e) {\n    // we don't really care\n  }\n\n  if (boardString === '') {\n    preflop(handString);\n  } else {\n    postflop(handString, boardString, game.n_players_in_hand);\n  }\n}\n\nfunction preflop(cardsString) {\n  const [card1, card2] = cardStringToObj(cardsString);\n  const handRanksString = card1.rank + card2.rank;\n\n  if (card1.suit === card2.suit) {\n    const suitedBetMultipliers =\n      suitedPreFlopHandsToBetMultipliers[handRanksString];\n    if (suitedBetMultipliers) {\n      console.log(\n        'Preflop cards are suited, and match one of the suited starting hands'\n      );\n      const [callToMult, raiseToMult] = suitedBetMultipliers;\n      makeBetUsingMultipliers(callToMult, raiseToMult);\n      return;\n    }\n  }\n\n  const betMultipliers = preFlopHandsToBetMultipliers[handRanksString];\n  if (!betMultipliers) {\n    if (Math.random() > 0.95) {\n      // 5% of the time we will randomly limp in\n      console.log(\n        \"Even though this isn't a hand we usually play, randomly limping in if it's cheap.\"\n      );\n      makeBetUsingMultipliers(3, 1);\n      return;\n    }\n\n    console.log('Checking or folding.');\n    checkOrFold();\n    return;\n  }\n\n  const [callToMult, raiseToMult] = betMultipliers;\n  makeBetUsingMultipliers(callToMult, raiseToMult);\n}\n\nfunction postflop(\n  cardsString,\n  boardCardsString,\n  playersInHand,\n  potSizeAtStartOfRound\n) {\n  var cards = cardStringToObj(cardsString);\n  var boardCards = cardStringToObj(boardCardsString);\n\n  const myhand = myPokerHand(cards, boardCards).hand;\n  const usedHoleCards = getHoleCardsUsed(cards, boardCards);\n\n  const betOptions = [];\n\n  if (myhand === HANDS.STRAIGHT_FLUSH && usedHoleCards.length > 0) {\n    betOptions.push({\n      message: 'Straight flush!',\n      callTo: mb.ALL,\n      raiseTo: 4 * boardCards.length,\n    });\n  }\n\n  if (myhand === HANDS.FOUR_OF_A_KIND && usedHoleCards.length > 0) {\n    betOptions.push({\n      message: 'Four of a kind',\n      callTo: mb.ALL,\n      raiseTo: 4 * boardCards.length,\n    });\n  }\n\n  // full houses\n  if (myhand === HANDS.FULL_HOUSE && usedHoleCards.length > 0) {\n    if (usedHoleCards === 2) {\n      if (myPokerHand([], boardCards).hand === HANDS.THREE_OF_A_KIND) {\n        if (boardCards.every((c) => c.ranknum < cards[0].ranknum)) {\n          betOptions.push({\n            message:\n              'Three of a kind on the board and we have a pocket overpair',\n            callTo: mb.ALL,\n            raiseTo: 4 * boardCards.length,\n          });\n        } else {\n          betOptions.push({\n            message:\n              'Three of a kind on the board and we have a pocket pair (not overpair)',\n            callTo: 10,\n            raiseTo: 3,\n          });\n        }\n      } else {\n        betOptions.push({\n          message: 'Full house using at least both hole cards',\n          callTo: mb.ALL,\n          raiseTo: 4 * boardCards.length,\n        });\n      }\n    } else if (myPokerHand([], boardCards).hand === HANDS.THREE_OF_A_KIND) {\n      betOptions.push({\n        message: 'Full house using 1 hole card, but trips on the board',\n        callTo: 5,\n        raiseTo: 5,\n      });\n    } else {\n      betOptions.push({\n        message: 'Full house using 1 hole card, no trips on the board',\n        callTo: mb.ALL,\n        raiseTo: 8,\n      });\n    }\n  }\n\n  // flushes\n  if (myhand === HANDS.FLUSH) {\n    if (usedHoleCards.length === 2) {\n      betOptions.push({\n        message: 'Flush using both our hole cards',\n        callTo: mb.ALL,\n        raiseTo: 7,\n      });\n    } else if (usedHoleCards.length === 1) {\n      if (['A', 'K'].includes(usedHoleCards[0].rank)) {\n        betOptions.push({\n          message: 'Flush using 1 hole card (A or K)',\n          callTo: mb.ALL,\n          raiseTo: 4,\n        });\n      }\n\n      betOptions.push({\n        message: 'Flush using 1 hole card (not A or K)',\n        callTo: 5,\n        raiseTo: 0,\n      });\n    } else {\n      // Flush on the board\n      // Check if we beat the board and have A or K\n      const hasHighCardInSuit = cards.some(\n        (card) =>\n          ['A', 'K'].includes(card.rank) && card.suit === boardCards[0].suit\n      );\n\n      if (hasHighCardInSuit) {\n        betOptions.push({\n          message: 'Flush using 1 hole card (A or K)',\n          callTo: mb.ALL,\n          raiseTo: 4,\n        });\n      } else {\n        if (Math.random() > 0.9) {\n          betOptions.push({\n            message:\n              'Flush on the board, but randomly bluffing 10% of the time',\n            callTo: 0,\n            raiseTo: mb.ALL,\n          });\n        } else {\n          // Right now this is just for logging\n          betOptions.push({\n            message: 'Flush on the board',\n            callTo: 0,\n            raiseTo: 0,\n          });\n        }\n      }\n    }\n  }\n\n  // straights\n  if (myhand === HANDS.STRAIGHT) {\n    if (usedHoleCards.length === 2) {\n      if (fourToFlush(boardCards)) {\n        betOptions.push({\n          message:\n            'Straight using both hole cards, but 4 to flush on the board',\n          callTo: 5,\n          raiseTo: 5,\n        });\n      } else {\n        betOptions.push({\n          message: 'Straight using both hole cards, wahoo!',\n          callTo: mb.ALL,\n          raiseTo: 7,\n        });\n      }\n    } else if (usedHoleCards.length === 1) {\n      if (fourToFlush(boardCards)) {\n        betOptions.push({\n          message: 'Straight using 1 hole card, but 4 to flush on the board',\n          callTo: 3,\n          raiseTo: 3,\n        });\n      } else {\n        betOptions.push({\n          message: 'Straight using only 1 hole card',\n          callTo: 20,\n          raiseTo: 3,\n        });\n      }\n    } else {\n      // Straight on the board\n      highestBoardCardRankNum = Math.max(...boardCards.map((c) => c.rankNum));\n      if (cards.some((c) => c.rankNum === highestBoardCardRankNum + 1)) {\n        // We beat the straight on the board\n        if (fourToFlush(boardCards)) {\n          betOptions.push({\n            message:\n              'We beat the straight on the board, but there are 4 to a flush',\n            callTo: 0,\n            raiseTo: 0,\n          });\n        } else {\n          betOptions.push({\n            message: 'Straight on the board, but we have a better straight',\n            callTo: mb.ALL,\n            raiseTo: 5,\n          });\n        }\n      } else {\n        // Right now this is just for logging\n        betOptions.push({\n          message: 'Straight on the board',\n          callTo: 0,\n          raiseTo: 0,\n        });\n      }\n    }\n  }\n\n  // trips (only using one card in hand)\n  if (myhand == HANDS.THREE_OF_A_KIND && usedHoleCards.length >= 1) {\n    if (fourToFlushOrStraight(boardCards)) {\n      betOptions.push({\n        message:\n          'Trips using at least 1 hole card, but 4 to flush/straight on the board',\n        callTo: 3,\n        raiseTo: 3,\n      });\n    } else if (usedHoleCards === 2) {\n      betOptions.push({\n        message: 'Pocket pair that hit trips or better',\n        callTo: mb.ALL,\n        raiseTo: 3 * boardCards.length,\n      });\n    } else {\n      betOptions.push({\n        message: 'Trips using 1 hole card',\n        callTo: 25,\n        raiseTo: 3 * boardCards.length,\n      });\n    }\n  }\n\n  // two pair (using both hole cards)\n  if (myhand == HANDS.TWO_PAIR && usedHoleCards.length == 2) {\n    if (fourToFlushOrStraight(boardCards)) {\n      betOptions.push({\n        message:\n          'Two pair using both hole cards but 4 to flush/straight on the board',\n        callTo: 3,\n        raiseTo: 3,\n      });\n    } else {\n      if (cards[0].rank === cards[1].rank) {\n        if (boardCards.every((c) => c.ranknum < cards[0].ranknum)) {\n          betOptions.push({\n            message: 'Pair on the board and pocket pair overpair',\n            callTo: 15,\n            raiseTo: 3,\n          });\n        } else {\n          betOptions.push({\n            message: 'Pair on the board and pocket pair (not overpair)',\n            callTo: 5,\n            raiseTo: 1,\n          });\n        }\n      } else {\n        betOptions.push({\n          message: 'Two pair using both hole cards',\n          callTo: 25,\n          raiseTo: 2 * boardCards.length,\n        });\n      }\n    }\n  }\n\n  // pair (possible 2 pair with one pair on the board)\n  if (\n    [AHNDS.PAIR, HANDS.TWO_PAIR].includes(myhand) &&\n    usedHoleCards.length == 1\n  ) {\n    if (fourToFlushOrStraight(boardCards)) {\n      betOptions.push({\n        message: 'Pair, but 4 to flush/straight on the board',\n        callTo: 3,\n        raiseTo: 3,\n      });\n    } else {\n      boardCardRankNumDescending = boardCards\n        .map((c) => c.ranknum)\n        .sort((a, b) => b - a);\n      if (usedHoleCards[0].ranknum === boardCardRankNumDescending[0]) {\n        if (boardCards.length === 3) {\n          if (playersInHand === 2) {\n            betOptions.push({\n              message: 'Top pair (only 1 other player in hand)',\n              callTo: 20,\n              raiseTo: 5,\n            });\n          } else {\n            betOptions.push({\n              message: 'Top pair',\n              callTo: 10,\n              raiseTo: 3,\n            });\n          }\n        } else if (boardCards.length === 4) {\n          if (playersInHand === 2) {\n            betOptions.push({\n              message: 'Top pair (only 1 other player in hand)',\n              callTo: 20,\n              raiseTo: 10,\n            });\n          } else {\n            betOptions.push({\n              message: 'Top pair',\n              callTo: 10,\n              raiseTo: 0,\n            });\n          }\n        } else {\n          if (playersInHand === 2) {\n            betOptions.push({\n              message: 'Top pair (only 1 other player in hand)',\n              callTo: 30,\n              raiseTo: 10,\n            });\n          } else {\n            betOptions.push({\n              message: 'Top pair',\n              callTo: 10,\n              raiseTo: 0,\n            });\n          }\n        }\n      } else if (usedHoleCards[0].ranknum === boardCardRankNumDescending[1]) {\n        if (boardCards.length === 3) {\n          betOptions.push({\n            message: 'Second pair',\n            callTo: 5,\n            raiseTo: 2,\n          });\n        } else {\n          betOptions.push({\n            message: 'Second pair',\n            callTo: 5,\n            raiseTo: 0,\n          });\n        }\n      }\n      betOptions.push({\n        message: 'low pair',\n        callTo: 3,\n        raiseTo: 0,\n      });\n    }\n  }\n\n  // pocket pairs\n  if (myhand === HANDS.PAIR && usedHoleCards === 2) {\n    if (fourToFlushOrStraight(boardCards)) {\n      betOptions.push({\n        message: 'Pocket pair, but 4 to flush/straight on the board',\n        callTo: 3,\n        raiseTo: 3,\n      });\n    } else {\n      if (boardCards.every((c) => c.ranknum < cards[0].ranknum)) {\n        betOptions.push({\n          message: 'Pocket pair overpair',\n          callTo: mb.ALL,\n          raiseTo: 5,\n        });\n      } else if (cards[0].ranknum > 9 && playersInHand == 2) {\n        betOptions.push({\n          message:\n            \"Pocket pair isn't top pair but it's high, and only 1 other player\",\n          callTo: 10,\n          raiseTo: 5,\n        });\n      }\n    }\n  }\n\n  // Flush Draw\n  if (hasFlushDraw(cards, boardCards)) {\n    if (boardCards.length === 3 && playersInHand === 2 && Math.random > 0.5) {\n      betOptions.push({\n        message:\n          'flush draw using both hole cards (3 cards on board), only 1 other player in hand, randomly going all in half the time',\n        callTo: 10,\n        raiseTo: mb.ALL,\n      });\n    } else if (boardCards.length !== 5) {\n      betOptions.push({\n        message: 'flush draw using both hole cards',\n        callTo: 10,\n        raiseTo: 0,\n      });\n    }\n  }\n\n  // Open ended straight draw\n  if (\n    checkStraightOrDrawOfLength(cards.concat(boardCards), 4) &&\n    !checkStraightOrDrawOfLength(boardCards, 4)\n  ) {\n    if (boardCards.length === 3 && playersInHand === 2) {\n      if (Math.random > 0.7) {\n        betOptions.push({\n          message: 'straight draw, randomly going all in 30% of the time',\n          callTo: 12,\n          raiseTo: mb.ALL,\n        });\n      } else {\n        betOptions.push({\n          message: 'open ended straight draw using at least 1 hole card',\n          callTo: 12,\n          raiseTo: 12,\n        });\n      }\n    } else if (boardCards.length !== 5) {\n      betOptions.push({\n        message: 'open ended straight draw using at least 1 hole card',\n        callTo: 10,\n        raiseTo: 10,\n      });\n    }\n  }\n\n  if (betOptions.length === 0 && playersInHand === 2) {\n    if (Math.random() > 0.97) {\n      betOptions.push({\n        message: 'Random bluff 3% of the time against 1 other player',\n        callTo: 0,\n        raiseTo: mb.ALL,\n      });\n    }\n    console.log('Nothing interesting going on with our hand. Check/folding');\n    checkOrFold();\n    return;\n  }\n\n  highestCallTo = 0;\n  highestRaiseTo = 0;\n  console.log('Considering betting based on these things:');\n  betOptions.forEach((betOption) => {\n    console.log(\n      'callTo: ' +\n        betOption.callTo +\n        ', raiseTo: ' +\n        betOption.raiseTo +\n        ', ' +\n        betOption.message\n    );\n    if (highestCallTo === mb.ALL || betOption.callTo === mb.ALL) {\n      highestCallTo = mb.ALL;\n    } else {\n      highestCallTo = Math.max(highestCallTo, betOption.callTo);\n    }\n    if (highestRaiseTo === mb.ALL || betOption.RaiseTo === mb.ALL) {\n      highestRaiseTo = mb.ALL;\n    } else {\n      highestRaiseTo = Math.max(highestRaiseTo, betOption.raiseTo);\n    }\n  });\n\n  console.log(\n    'Will call to: ' + highestCallTo + ' or raise to: ' + highestRaiseTo\n  );\n  makeBetUsingMultipliers(highestCallTo, highestRaiseTo);\n\n  return;\n}\n\nexport function handleShowdown() {\n  const seat = game.client_perspective;\n  if (\n    game.n_players_in_hand > 1 &&\n    game.players[seat].is_sitting_in &&\n    !game.players[seat].is_folded\n  ) {\n    console.log('SHOWDOWN WITH ME IN IT');\n    console.log('# players in showdown:', game.n_players_in_hand);\n    tauntOpportunity = Object.entries(game.players).some(\n      ([i, player]) =>\n        player.is_sitting_in &&\n        !player.is_folded &&\n        player.chips === 0 &&\n        i !== seat + ''\n    );\n    console.log('tauntOpportunity', tauntOpportunity);\n  }\n}\n\nexport function handlePotDistribution(potData) {\n  const seat = game.client_perspective;\n  if (\n    tauntOpportunity &&\n    potData.winners[seat] &&\n    Object.keys(potData.winners).length === 1\n  ) {\n    // TODO will taunt before animations finish. eventually, add a delay or wait for some event\n    // indicating animations are done\n    console.log('Taunting because I knocked someone out!');\n    socket.emit('taunt', {\n      taunt: 16,\n      id: game.table_id,\n      group_id: game.group_id,\n    });\n  }\n  tauntOpportunity = false;\n}\n\nfunction getHoleCardsUsed(holeCards, boardCards) {\n  const withBoth = myPokerHand(holeCards, boardCards).hand;\n  const noHoleCards = myPokerHand([], boardCards).hand;\n  if (withBoth === noHoleCards) {\n    return [];\n  }\n  const [withFirst, withSecond] = holeCards.map(\n    (holeCard) => myPokerHand([holeCard], boardCards).hand\n  );\n  if (withFirst === withBoth && withSecond === withBoth) {\n    // either card gets you just as good a hand as with both of them. return the one with higher rank\n    return holeCards[0].rankNum > holeCards[1].rankNum\n      ? [holeCards[0]]\n      : [holeCards[1]];\n  } else if (withBoth === withFirst) {\n    return [holeCards[0]];\n  } else if (withBoth === withSecond) {\n    return [holeCards[1]];\n  } else {\n    return holeCards;\n  }\n}\n\nfunction fourToFlushOrStraight(allCards) {\n  return fourToFlush(allCards) || checkStraightOrDrawOfLength(allCards, 4);\n}\n\n// Some duplicated work here that we could clean up\nfunction fourToFlush(allCards) {\n  const suitToCount = {};\n  allCards.forEach((card) => {\n    const currentSuitCount = suitToCount[card.suit] || 0;\n    suitToCount[card.suit] = currentSuitCount + 1;\n  });\n\n  return Object.values(suitToCount).some((count) => {\n    return count === 4;\n  });\n}\n\n// For now we are only considering flush draws that use both hole cards\nfunction hasFlushDraw(handCards, boardCards) {\n  const suitToCount = {};\n  const allCards = handCards.concat(boardCards);\n  allCards.forEach((card) => {\n    const currentSuitCount = suitToCount[card.suit] || 0;\n    suitToCount[card.suit] = currentSuitCount + 1;\n  });\n\n  return Object.entries(suitToCount).some(([suit, count]) => {\n    return count === 4 && handCards.every((c) => c.suit === suit);\n  });\n}\n","import {checkIfTurnAndPlay, handleShowdown, handlePotDistribution} from './playhand'\n\nsetInterval(checkIfTurnAndPlay, 2500)\nsocket.on('is in showdown', handleShowdown)\nsocket.on('distributing pot', handlePotDistribution)"],"names":["$0df1a61bc49d2233$var$nonNumericRankToNum","T","J","Q","K","A","$0df1a61bc49d2233$export$1c585bc21eb51405","cardsString","cards","split","filter","card","map","cardString","rank","suit","ranknum","parseInt","sort","a","b","$4bc93b426d7a2d10$export$c0e98576cfcf6795","HIGH_CARD","PAIR","TWO_PAIR","THREE_OF_A_KIND","STRAIGHT","FLUSH","FULL_HOUSE","FOUR_OF_A_KIND","STRAIGHT_FLUSH","$4be18b68299772f5$export$50fb8bc86304c405","allCards","lengthOfDraw","sortedRanks","c","uniqueRanksInOrder","Set","join","startsWith","i","length","subStringToCheck","slice","includes","$4be18b68299772f5$export$d23da08cb65660ef","handCards","boardCards","rankToCount","Map","suitToCount","concat","forEach","set","get","flushRanks","straightFlushTopRank","highestRankAndCount","count","secondHighestRankAndCount","cardsOfSuit","hand","handRanks","kickers","fourOfAKindRank","cardsMinusFourOfAKind","$4be18b68299772f5$export$737596005815f338","tripRank","pairRank","topRankInStraight","cardsMinusTrips","pairRanks","cardsMinusPairs","cardsMinusPair","n","$f86c89a0cb56440a$var$tauntOpportunity","$f86c89a0cb56440a$var$mb","game","big_blind","$f86c89a0cb56440a$var$preFlopHandsToBetMultipliers","AA","KK","QQ","JJ","TT","AK","AQ","AJ","A5","AT","A9","A8","KQ","KJ","KT","K9","QJ","QT","Q9","Q8","JT","J9","J8","J7","T9","$f86c89a0cb56440a$var$suitedPreFlopHandsToBetMultipliers","A7","A6","A4","A3","A2","K8","T8","T7","$f86c89a0cb56440a$var$checkOrFold","action_widget","to_call","$f86c89a0cb56440a$var$checkOrCall","execute_fold","execute_check_call","$f86c89a0cb56440a$var$makeBetUsingMultipliers","callToMult","raiseToMult","betSizeIfAllIn","stack_size","bet_in_front","callToLimit","raiseToLimit","betInFront","betSizeIfCall","minBet","threshold_values","undefined","console","info","bet_button","raise_button","log","update_slider_by_value","sizing_input","value","execute_bet_raise","all_in","execute","call_button","$f86c89a0cb56440a$var$makeBetOfSize","$f86c89a0cb56440a$var$fourToFlushOrStraight","$f86c89a0cb56440a$var$fourToFlush","currentSuitCount","Object","values","some","setInterval","async","players","client_perspective","card_str","Promise","resolve","setTimeout","holeCards","board","boardCardsLogMsg","handString","boardString","ruleset_name","game_options_widget","allow_easy_reveal","easy_reveal","is_checked","clicked","bomb_pot_value","bomb_pot","$f86c89a0cb56440a$var$setDefaultGameOptions","e","card1","card2","handRanksString","suitedBetMultipliers","betMultipliers","Math","random","$f86c89a0cb56440a$var$preflop","boardCardsString","playersInHand","potSizeAtStartOfRound","myhand","usedHoleCards","withBoth","noHoleCards","withFirst","withSecond","holeCard","rankNum","$f86c89a0cb56440a$var$getHoleCardsUsed","betOptions","push","message","callTo","raiseTo","every","highestBoardCardRankNum","max","AHNDS","boardCardRankNumDescending","entries","$f86c89a0cb56440a$var$hasFlushDraw","highestCallTo","highestRaiseTo","betOption","RaiseTo","$f86c89a0cb56440a$var$postflop","n_players_in_hand","$f86c89a0cb56440a$var$playHand","socket","on","seat","is_sitting_in","is_folded","player","chips","potData","winners","keys","emit","taunt","id","table_id","group_id"],"version":3,"file":"index.js.map"}